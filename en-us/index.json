[{"categories":null,"contents":"Frequently Asked Questions This page contains some common questions and answers.\nAlso see Support Options\n Difference between 1.x and 1.x.x downloads How to migrate from Gogs/GitHub/etc. to Gitea Where does Gitea store \u0026ldquo;x\u0026rdquo; file Not seeing a clone URL or the clone URL being incorrect Custom Templates not loading or working incorrectly Active user vs login prohibited user Setting up logging What is Swagger? Adjusting your server for public/private use  Preventing spammers Only allow certain email domains Only allow/block certain OpenID providers Issue only users Restricted users Enable Fail2ban   Adding custom themes SSHD vs built-in SSH Gitea is running slow Can\u0026rsquo;t create repositories/files Translation is incorrect/how to add more translations Hooks aren\u0026rsquo;t running SSH Issues  SSH Common Errors   Missing releases after migration repository with tags LFS Issues How can I create users before starting Gitea How can I enable password reset How can a user\u0026rsquo;s password be changed Why is my markdown broken  Difference between 1.x and 1.x.x downloads Version 1.7.x will be used for this example.\nNOTE: this example applies to Docker images as well!\nOn our downloads page you will see a 1.7 directory, as well as directories for 1.7.0, 1.7.1, 1.7.2, 1.7.3, 1.7.4, 1.7.5, and 1.7.6.\nThe 1.7 and 1.7.0 directories are not the same. The 1.7 directory is built on each merged commit to the release/v1.7 branch.\nThe 1.7.0 directory, however, is a build that was created when the v1.7.0 tag was created.\nThis means that 1.x downloads will change as commits are merged to their respective branch (think of it as a separate \u0026ldquo;master\u0026rdquo; branch for each release).\nOn the other hand, 1.x.x downloads should never change.\nHow to migrate from Gogs/GitHub/etc. to Gitea To migrate from Gogs to Gitea:\n Gogs version 0.9.146 or less Gogs version 0.11.46.0418  To migrate from GitHub to Gitea, you can use Gitea\u0026rsquo;s built-in migration form.\nIn order to migrate items such as issues, pull requests, etc. you will need to input at least your username.\nExample (requires login)\nTo migrate from Gitlab to Gitea, you can use this non-affiliated tool:\nhttps://github.com/loganinak/MigrateGitlabToGogs\nWhere does Gitea store \u0026ldquo;x\u0026rdquo; file  WorkPath  Environment variable GITEA_WORK_DIR Else binary location   AppDataPath (default for database, indexers, etc.)  APP_DATA_PATH from app.ini Else %(WorkPath)/data   CustomPath (custom templates)  Environment variable GITEA_CUSTOM Else %(WorkPath)/custom   HomeDir  Unix: Environment variable HOME Windows: Environment variable USERPROFILE, else environment variables HOMEDRIVE+HOMEPATH   RepoRootPath  ROOT in app.ini Else %(HomeDir)/gitea-repositories   INI (config file)  -c flag Else %(CustomPath)/conf/app.ini   SQLite Database  PATH in database section of app.ini Else %(AppDataPath)/gitea.db    Not seeing a clone URL or the clone URL being incorrect There are a few places that could make this show incorrectly.\n If using a reverse proxy, make sure you have followed the correction directions in the reverse proxy guide Make sure you have correctly set ROOT_URL in the server section of your app.ini  If certain clone options aren\u0026rsquo;t showing up (HTTP/S or SSH), the following options can be checked in your app.ini\nDISABLE_HTTP_GIT: if set to true, there will be no HTTP/HTTPS link\nDISABLE_SSH: if set to true, there will be no SSH link\nSSH_EXPOSE_ANONYMOUS: if set to false, SSH links will be hidden for anonymous users\nCustom Templates not loading or working incorrectly Gitea\u0026rsquo;s custom templates must be added to the correct location or Gitea will not find and use them.\nThe correct path for the template(s) will be relative to the CustomPath\n To find CustomPath, look for Custom File Root Path in Site Administration -\u0026gt; Configuration   If that doesn\u0026rsquo;t exist, you can try echo $GITEA_CUSTOM  If you are still unable to find a path, the default can be calculated above Once you have figured out the correct custom path, you can refer to the customizing Gitea page to add your template to the correct location.  Active user vs login prohibited user In Gitea, an \u0026ldquo;active\u0026rdquo; user refers to a user that has activated their account via email.\nA \u0026ldquo;login prohibited\u0026rdquo; user is a user that is not allowed to log in to Gitea anymore\nSetting up logging  Official Docs  What is Swagger? Swagger is what Gitea uses for its API.\nAll Gitea instances have the built-in API, though it can be disabled by setting ENABLE_SWAGGER to false in the api section of your app.ini\nFor more information, refer to Gitea\u0026rsquo;s API docs\nSwagger Example\nAdjusting your server for public/private use Preventing spammers There are multiple things you can combine to prevent spammers.\n By only whitelisting certain domains with OpenID (see below) Setting ENABLE_CAPTCHA to true in your app.ini and properly configuring RECAPTCHA_SECRET and RECAPTCHA_SITEKEY Settings DISABLE_REGISTRATION to true and creating new users via the CLI, API, or Gitea\u0026rsquo;s Admin UI  Only allow certain email domains You can configure EMAIL_DOMAIN_WHITELIST in your app.ini under [service]\nOnly allow/block certain OpenID providers You can configure WHITELISTED_URIS or BLACKLISTED_URIS under [openid] in your app.ini\nNOTE: whitelisted takes precedence, so if it is non-blank then blacklisted is ignored\nIssue only users The current way to achieve this is to create/modify a user with a max repo creation limit of 0.\nRestricted users Restricted users are limited to a subset of the content based on their organization/team memberships and collaborations, ignoring the public flag on organizations/repos etc.__\nExample use case: A company runs a Gitea instance that requires login. Most repos are public (accessible/browseable by all co-workers).\nAt some point, a customer or third party needs access to a specific repo and only that repo. Making such a customer account restricted and granting any needed access using team membership(s) and/or collaboration(s) is a simple way to achieve that without the need to make everything private.\nEnable Fail2ban Use [Fail2Ban]({{ relref \u0026ldquo;doc/usage/fail2ban-setup.md\u0026rdquo; \u0026gt;}}) to monitor and stop automated login attempts or other malicious behavior based on log patterns\nHow to add/use custom themes Gitea supports two official themes right now, gitea and arc-green (light and dark respectively)\nTo add your own theme, currently the only way is to provide a complete theme (not just color overrides)\nAs an example, let\u0026rsquo;s say our theme is arc-blue (this is a real theme, and can be found in this issue)\nName the .css file theme-arc-blue.css and add it to your custom folder in custom/pulic/css\nAllow users to use it by adding arc-blue to the list of THEMES in your app.ini\nSSHD vs built-in SSH SSHD is the built-in SSH server on most Unix systems.\nGitea also provides its own SSH server, for usage when SSHD is not available.\nGitea is running slow The most common culprit for this is loading federated avatars.\nThis can be turned off by setting ENABLE_FEDERATED_AVATAR to false in your app.ini\nAnother option that may need to be changed is setting DISABLE_GRAVATAR to true in your app.ini\nCan\u0026rsquo;t create repositories/files Make sure that Gitea has sufficient permissions to write to its home directory and data directory.\nSee AppDataPath and RepoRootPath\nNote for Arch users: At the time of writing this, there is an issue with the Arch package\u0026rsquo;s systemd file including this line: ReadWritePaths=/etc/gitea/app.ini\nWhich makes all other paths non-writeable to Gitea.\nTranslation is incorrect/how to add more translations Our translations are currently crowd-sourced on our Crowdin project\nWhether you want to change a translation or add a new one, it will need to be there as all translations are overwritten in our CI via the Crowdin integration.\nHooks aren\u0026rsquo;t running If Gitea is not running hooks, a common cause is incorrect setup of SSH keys.\nSee SSH Issues for more information.\nYou can also try logging into the administration panel and running the Resynchronize pre-receive, update and post-receive hooks of all repositories. option.\nSSH issues If you cannot reach repositories over ssh, but https works fine, consider looking into the following.\nFirst, make sure you can access Gitea via SSH.\nssh git@myremote.example\nIf the connection is successful, you should receive an error message like the following:\nHi there, You've successfully authenticated, but Gitea does not provide shell access. If this is unexpected, please log in with password and setup Gitea under another user. If you do not get the above message but still connect, it means your SSH key is not being managed by Gitea. This means hooks won\u0026rsquo;t run, among other potential problems.\nIf you cannot connect at all, your SSH key may not be configured correctly locally. This is specific to SSH and not Gitea, so will not be covered here.\nSSH Common Errors Permission denied (publickey). fatal: Could not read from remote repository. This error signifies that the server rejected a log in attempt, check the following things:\n On the client:  Ensure the public and private ssh keys are added to the correct Gitea user. Make sure there are no issues in the remote url. In particular, ensure the name of the git user (before the @) is spelled correctly. Ensure public and private ssh keys are correct on client machine.   On the server:  Make sure the repository exists and is correctly named. Check the permissions of the .ssh directory in the system user\u0026rsquo;s home directory. Verify that the correct public keys are added to .ssh/authorized_keys.\nTry to run Rewrite '.ssh/authorized_keys' file (for Gitea SSH keys) on the Gitea admin panel. Read Gitea logs. Read /var/log/auth (or similar). Check permissions of repositories.    The following is an example of a missing public SSH key where authentication succeeded, but some other setting is preventing SSH from reaching the correct repository.\nfatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. In this case, look into the following settings:\n On the server:  Make sure that the git system user has a usable shell set  Verify this with getent passwd git | cut -d: -f7 usermod or chsh can be used to modify this.   Ensure that the gitea serv command in .ssh/authorized_keys uses the correct configuration file.    Missing releases after migrating repository with tags To migrate an repository with all tags, you need to do two things:\n Push tags to the repository:   git push --tags  (Re-)sync tags of all repositories within Gitea:  gitea admin repo-sync-releases LFS Issues For issues concerning LFS data upload\nbatch response: Authentication required: Authorization error: \u0026lt;GITEA_LFS_URL\u0026gt;/info/lfs/objects/batch Check that you have proper access to the repository error: failed to push some refs to '\u0026lt;GIT_REPO_URL\u0026gt;' Check the value of LFS_HTTP_AUTH_EXPIRY in your app.ini file.\nBy default, your LFS token will expire after 20 minutes. If you have a slow connection or a large file (or both), it may not finish uploading within the time limit.\nYou may want to set this value to 60m or 120m.\nHow can I create users before starting Gitea Gitea provides a sub-command gitea migrate to initialize the database, after which you can use the admin CLI commands to add users like normal.\nHow can I enable password reset There is no setting for password resets. It is enabled when a mail service is configured, and disabled otherwise.\nHow can a user\u0026rsquo;s password be changed  As an admin, you can change any user\u0026rsquo;s password (and optionally force them to change it on next login)\u0026hellip;  By navigating to your Site Administration -\u0026gt; User Accounts page and editing a user. By using the admin CLI commands.\nKeep in mind most commands will also need a global flag to point the CLI at the correct configuration.   As a user you can change it\u0026hellip;  In your account Settings -\u0026gt; Account page (this method requires you to know your current password). By using the Forgot Password link.\nIf the Forgot Password/Account Recovery page is disabled, please contact your administrator to configure a mail service.    Why is my markdown broken In Gitea version 1.11 we moved to goldmark for markdown rendering, which is CommonMark compliant.\nIf you have markdown that worked as you expected prior to version 1.11 and after upgrading it\u0026rsquo;s not working anymore, please look through the CommonMark spec to see whether the problem is due to a bug or non-compliant syntax.\nIf it is the latter, usually there is a compliant alternative listed in the spec.\n","permalink":"https://ertlans.github.io/en-us/faq/","tags":null,"title":"FAQ"},{"categories":null,"contents":"Gitea compared to other Git hosting options To help decide if Gitea is suited for your needs, here is how it compares to other Git self hosted options.\nBe warned that we don\u0026rsquo;t regularly check for feature changes in other products, so this list may be outdated. If you find anything that needs to be updated in the table below, please report it in an issue on GitHub.\nSymbols used in table:\n  ✓ - supported\n  ⁄ - supported with limited functionality\n  ✘ - unsupported\n  General Features    Feature Gitea Gogs GitHub EE GitLab CE GitLab EE BitBucket RhodeCode CE     Open source and free ✓ ✓ ✘ ✓ ✘ ✘ ✓   Low resource usage (RAM/CPU) ✓ ✓ ✘ ✘ ✘ ✘ ✘   Multiple database support ✓ ✓ ✘ ⁄ ⁄ ✓ ✓   Multiple OS support ✓ ✓ ✘ ✘ ✘ ✘ ✓   Easy upgrade process ✓ ✓ ✘ ✓ ✓ ✘ ✓   Markdown support ✓ ✓ ✓ ✓ ✓ ✓ ✓   Orgmode support ✓ ✘ ✓ ✘ ✘ ✘ ?   CSV support ✓ ✘ ✓ ✘ ✘ ✓ ?   Third-party render tool support ✓ ✘ ✘ ✘ ✘ ✓ ?   Static Git-powered pages ✘ ✘ ✓ ✓ ✓ ✘ ✘   Integrated Git-powered wiki ✓ ✓ ✓ ✓ ✓ ✓ ✘   Deploy Tokens ✓ ✓ ✓ ✓ ✓ ✓ ✓   Repository Tokens with write rights ✓ ✘ ✓ ✓ ✓ ✘ ✓   Built-in Container Registry ✘ ✘ ✘ ✓ ✓ ✘ ✘   External git mirroring ✓ ✓ ✘ ✘ ✓ ✓ ✓   FIDO U2F (2FA) ✓ ✘ ✓ ✓ ✓ ✓ ✘   Built-in CI/CD ✘ ✘ ✘ ✓ ✓ ✘ ✘   Subgroups: groups within groups ✘ ✘ ✘ ✓ ✓ ✘ ✓    Code management    Feature Gitea Gogs GitHub EE GitLab CE GitLab EE BitBucket RhodeCode CE     Repository topics ✓ ✘ ✓ ✓ ✓ ✘ ✘   Repository code search ✓ ✘ ✓ ✓ ✓ ✓ ✓   Global code search ✓ ✘ ✓ ✘ ✓ ✓ ✓   Git LFS 2.0 ✓ ✘ ✓ ✓ ✓ ⁄ ✓   Group Milestones ✘ ✘ ✘ ✓ ✓ ✘ ✘   Granular user roles (Code, Issues, Wiki etc) ✓ ✘ ✘ ✓ ✓ ✘ ✘   Verified Committer ⁄ ✘ ? ✓ ✓ ✓ ✘   GPG Signed Commits ✓ ✘ ✓ ✓ ✓ ✓ ✓   Reject unsigned commits ✓ ✘ ✓ ✓ ✓ ✘ ✓   Repository Activity page ✓ ✘ ✓ ✓ ✓ ✓ ✓   Branch manager ✓ ✘ ✓ ✓ ✓ ✓ ✓   Create new branches ✓ ✘ ✓ ✓ ✓ ✘ ✘   Web code editor ✓ ✓ ✓ ✓ ✓ ✓ ✓   Commit graph ✓ ✘ ✓ ✓ ✓ ✓ ✓   Template Repositories ✓ ✘ ✓ ✘ ✓ ✓ ✘    Issue Tracker    Feature Gitea Gogs GitHub EE GitLab CE GitLab EE BitBucket RhodeCode CE     Issue tracker ✓ ✓ ✓ ✓ ✓ ✓ ✘   Issue templates ✓ ✓ ✓ ✓ ✓ ✘ ✘   Labels ✓ ✓ ✓ ✓ ✓ ✘ ✘   Time tracking ✓ ✘ ✓ ✓ ✓ ✘ ✘   Multiple assignees for issues ✓ ✘ ✓ ✘ ✓ ✘ ✘   Related issues ✘ ✘ ⁄ ✘ ✓ ✘ ✘   Confidential issues ✘ ✘ ✘ ✓ ✓ ✘ ✘   Comment reactions ✓ ✘ ✓ ✓ ✓ ✘ ✘   Lock Discussion ✓ ✘ ✓ ✓ ✓ ✘ ✘   Batch issue handling ✓ ✘ ✓ ✓ ✓ ✘ ✘   Issue Boards ✘ ✘ ✘ ✓ ✓ ✘ ✘   Create new branches from issues ✘ ✘ ✘ ✓ ✓ ✘ ✘   Issue search ✓ ✘ ✓ ✓ ✓ ✓ ✘   Global issue search ✘ ✘ ✓ ✓ ✓ ✓ ✘   Issue dependency ✓ ✘ ✘ ✘ ✘ ✘ ✘   Create issue via email ✘ ✘ ✘ ✘ ✓ ✓ ✘   Service Desk ✘ ✘ ✘ ✘ ✓ ✘ ✘    Pull/Merge requests    Feature Gitea Gogs GitHub EE GitLab CE GitLab EE BitBucket RhodeCode CE     Pull/Merge requests ✓ ✓ ✓ ✓ ✓ ✓ ✓   Squash merging ✓ ✘ ✓ ✘ ✓ ✓ ✓   Rebase merging ✓ ✓ ✓ ✘ ⁄ ✘ ✓   Pull/Merge request inline comments ✓ ✘ ✓ ✓ ✓ ✓ ✓   Pull/Merge request approval ✓ ✘ ⁄ ✓ ✓ ✓ ✓   Merge conflict resolution ✘ ✘ ✓ ✓ ✓ ✓ ✘   Restrict push and merge access to certain users ✓ ✘ ✓ ⁄ ✓ ✓ ✓   Revert specific commits or a merge request ✘ ✘ ✓ ✓ ✓ ✓ ✘   Pull/Merge requests templates ✓ ✓ ✓ ✓ ✓ ✘ ✘   Cherry-picking changes ✘ ✘ ✘ ✓ ✓ ✘ ✘   Download Patch ✓ ✘ ✓ ✓ ✓ / ✘    3rd-party integrations    Feature Gitea Gogs GitHub EE GitLab CE GitLab EE BitBucket RhodeCode CE     Webhook support ✓ ✓ ✓ ✓ ✓ ✓ ✓   Custom Git Hooks ✓ ✓ ✓ ✓ ✓ ✓ ✓   AD / LDAP integration ✓ ✓ ✓ ✓ ✓ ✓ ✓   Multiple LDAP / AD server support ✓ ✓ ✘ ✘ ✓ ✓ ✓   LDAP user synchronization ✓ ✘ ✓ ✓ ✓ ✓ ✓   OpenId Connect support ✓ ✘ ✓ ✓ ✓ ? ✘   OAuth 2.0 integration (external authorization) ✓ ✘ ⁄ ✓ ✓ ? ✓   Act as OAuth 2.0 provider ✓ ✘ ✓ ✓ ✓ ✓ ✘   Two factor authentication (2FA) ✓ ✓ ✓ ✓ ✓ ✓ ✘   Mattermost/Slack integration ✓ ✓ ⁄ ✓ ✓ ⁄ ✓   Discord integration ✓ ✓ ✓ ✓ ✓ ✘ ✘   Microsoft Teams integration ✓ ✘ ✓ ✓ ✓ ✓ ✘   External CI/CD status display ✓ ✘ ✓ ✓ ✓ ✓ ✓    ","permalink":"https://ertlans.github.io/en-us/comparison/","tags":null,"title":"Gitea compared to other Git hosting options"},{"categories":null,"contents":"","permalink":"https://ertlans.github.io/en-us/help/","tags":null,"title":"Help"},{"categories":null,"contents":"Some jurisdictions (such as EU), requires certain legal pages (e.g. Privacy Policy) to be added to website. Follow these steps to add them to your Gitea instance.\nGetting Pages Gitea source code ships with sample pages, available in contrib/legal directory. Copy them to custom/public/. For example, to add Privacy Policy:\nwget -O /path/to/custom/public/privacy.html https://raw.githubusercontent.com/go-gitea/gitea/master/contrib/legal/privacy.html.sample Now you need to edit the page to meet your requirements. In particular you must change the email addresses, web addresses and references to \u0026ldquo;Your Gitea Instance\u0026rdquo; to match your situation.\nYou absolutely must not place a general ToS or privacy statement that implies that the gitea project is responsible for your server.\nMake it Visible Create or append to /path/to/custom/templates/custom/extra_links_footer.tmpl:\n\u0026lt;a class=\u0026#34;item\u0026#34; href=\u0026#34;{{AppSubUrl}}/privacy.html\u0026#34;\u0026gt;Privacy Policy\u0026lt;/a\u0026gt; Restart Gitea to see the changes.\n","permalink":"https://ertlans.github.io/en-us/adding-legal-pages/","tags":null,"title":"Adding Legal Pages"},{"categories":null,"contents":"Customizing Gitea Customizing Gitea is typically done using the CustomPath folder - by default this is the custom folder from the running directory, but may be different if your build has set this differently. This is the central place to override configuration settings, templates, etc. You can check the CustomPath using gitea help. You can also find the path on the Configuration tab in the Site Administration page. You can override the CustomPath by setting either the GITEA_CUSTOM environment variable or by using the --custom-path option on the gitea binary. (The option will override the environment variable.)\nIf Gitea is deployed from binary, all default paths will be relative to the Gitea binary. If installed from a distribution, these paths will likely be modified to the Linux Filesystem Standard. Gitea will attempt to create required folders, including custom/. Distributions may provide a symlink for custom using /etc/gitea/.\nApplication settings can be found in file CustomConf which is by default, CustomPath/conf/app.ini but may be different if your build has set this differently. Again gitea help will allow you review this variable and you can override it using the --config option on the gitea binary.\n Quick Cheat Sheet Complete List  If the CustomPath folder can\u0026rsquo;t be found despite checking gitea help, check the GITEA_CUSTOM environment variable; this can be used to override the default path to something else. GITEA_CUSTOM might, for example, be set by an init script.\n List of Environment Variables  Note: Gitea must perform a full restart to see configuration changes.\nServing custom public files To make Gitea serve custom public files (like pages and images), use the folder custom/public/ as the webroot. Symbolic links will be followed.\nFor example, a file image.png stored in custom/public/, can be accessed with the url http://gitea.domain.tld/image.png.\nChanging the default avatar Place the png image at the following path: custom/public/img/avatar_default.png\nCustomizing Gitea pages and resources Gitea\u0026rsquo;s executable contains all the resources required to run: templates, images, style-sheets and translations. Any of them can be overridden by placing a replacement in a matching path inside the custom directory. For example, to replace the default .gitignore provided for C++ repositories, we want to replace options/gitignore/C++. To do this, a replacement must be placed in custom/options/gitignore/C++ (see about the location of the custom directory at the top of this document).\nEvery single page of Gitea can be changed. Dynamic content is generated using go templates, which can be modified by placing replacements below the custom/templates directory.\nTo obtain any embedded file (including templates), the gitea embedded tool can be used. Alternatively, they can be found in the templates directory of Gitea source (Note: the example link is from the master branch. Make sure to use templates compatible with the release you are using).\nBe aware that any statement contained inside {{ and }} are Gitea\u0026rsquo;s template syntax and shouldn\u0026rsquo;t be touched without fully understanding these components.\nCustomizing startpage / homepage Copy home.tmpl for your version of Gitea from templates to custom/templates. Edit as you wish. Dont forget to restart your gitea to apply the changes.\nAdding links and tabs If all you want is to add extra links to the top navigation bar or footer, or extra tabs to the repository view, you can put them in extra_links.tmpl (links added to the navbar), extra_links_footer.tmpl (links added to the left side of footer), and extra_tabs.tmpl inside your custom/templates/custom/ directory.\nFor instance, let\u0026rsquo;s say you are in Germany and must add the famously legally-required \u0026ldquo;Impressum\u0026rdquo;/about page, listing who is responsible for the site\u0026rsquo;s content: just place it under your \u0026ldquo;custom/public/\u0026rdquo; directory (for instance custom/public/impressum.html) and put a link to it in either custom/templates/custom/extra_links.tmpl or custom/templates/custom/extra_links_footer.tmpl.\nTo match the current style, the link should have the class name \u0026ldquo;item\u0026rdquo;, and you can use {{AppSubUrl}} to get the base URL: \u0026lt;a class=\u0026quot;item\u0026quot; href=\u0026quot;{{AppSubUrl}}/impressum.html\u0026quot;\u0026gt;Impressum\u0026lt;/a\u0026gt;\nFor more information, see Adding Legal Pages.\nYou can add new tabs in the same way, putting them in extra_tabs.tmpl. The exact HTML needed to match the style of other tabs is in the file templates/repo/header.tmpl (source in GitHub)\nOther additions to the page Apart from extra_links.tmpl and extra_tabs.tmpl, there are other useful templates you can put in your custom/templates/custom/ directory:\n header.tmpl, just before the end of the \u0026lt;head\u0026gt; tag where you can add custom CSS files for instance. body_outer_pre.tmpl, right after the start of \u0026lt;body\u0026gt;. body_inner_pre.tmpl, before the top navigation bar, but already inside the main container \u0026lt;div class=\u0026quot;full height\u0026quot;\u0026gt;. body_inner_post.tmpl, before the end of the main container. body_outer_post.tmpl, before the bottom \u0026lt;footer\u0026gt; element. footer.tmpl, right before the end of the \u0026lt;body\u0026gt; tag, a good place for additional Javascript.  Example: Mermaid.js If you would like to add mermaid.js support to Gitea\u0026rsquo;s markdown you simply add:\n{{if .RequireHighlightJS}} \u0026lt;script src=\u0026#34;https://unpkg.com/mermaid@8.4.5/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- or wherever you have placed it --\u0026gt; \u0026lt;script\u0026gt;mermaid.init(\u0026#34;.language-mermaid\u0026#34;)\u0026lt;/script\u0026gt; {{end}} to custom/footer.tmpl. You then can add blocks like below to your markdown:\n```mermaid stateDiagram [*] --\u0026gt; Active state Active { [*] --\u0026gt; NumLockOff NumLockOff --\u0026gt; NumLockOn : EvNumLockPressed NumLockOn --\u0026gt; NumLockOff : EvNumLockPressed -- [*] --\u0026gt; CapsLockOff CapsLockOff --\u0026gt; CapsLockOn : EvCapsLockPressed CapsLockOn --\u0026gt; CapsLockOff : EvCapsLockPressed -- [*] --\u0026gt; ScrollLockOff ScrollLockOff --\u0026gt; ScrollLockOn : EvCapsLockPressed ScrollLockOn --\u0026gt; ScrollLockOff : EvCapsLockPressed } ```  If you want to use Mermaid.js outside of markdown, e.g. in other templates or HTML files, you would need to remove {{if .RequireHighlightJS}} and {{end}}.\nMermaid will detect and use tags with class=\u0026quot;language-mermaid\u0026quot;.\nExample: PlantUML You can add PlantUML support to Gitea\u0026rsquo;s markdown by using a PlantUML server. The data is encoded and sent to the PlantUML server which generates the picture. There is an online demo server at http://www.plantuml.com/plantuml, but if you (or your users) have sensitive data you can set up your own PlantUML server instead. To set up PlantUML rendering, copy javascript files from https://gitea.com/davidsvantesson/plantuml-code-highlight and put them in your custom/public folder. Then add the following to custom/footer.tmpl:\n{{if .RequireHighlightJS}} \u0026lt;script src=\u0026#34;https://your-server.com/deflate.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://your-server.com/encode.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://your-server.com/plantuml_codeblock_parse.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; \u0026lt;!-- Replace call with address to your plantuml server--\u0026gt; parsePlantumlCodeBlocks(\u0026#34;http://www.plantuml..com/plantuml\u0026#34;) \u0026lt;/script\u0026gt; {{end}} You can then add blocks like the following to your markdown:\n```plantuml Alice -\u0026gt; Bob: Authentication Request Bob --\u0026gt; Alice: Authentication Response Alice -\u0026gt; Bob: Another authentication Request Alice \u0026lt;-- Bob: Another authentication Response ```  The script will detect tags with class=\u0026quot;language-plantuml\u0026quot;, but you can change this by providing a second argument to parsePlantumlCodeBlocks.\nExample: STL Preview You can display STL file directly in Gitea by adding:\n\u0026lt;script\u0026gt; function lS(src){ return new Promise(function(resolve, reject) { let s = document.createElement(\u0026#39;script\u0026#39;) s.src = src s.addEventListener(\u0026#39;load\u0026#39;, () =\u0026gt; { resolve() }) document.body.appendChild(s) }); } if($(\u0026#39;.view-raw\u0026gt;a[href$=\u0026#34;.stl\u0026#34; i]\u0026#39;).length){ $(\u0026#39;body\u0026#39;).append(\u0026#39;\u0026lt;link href=\u0026#34;/Madeleine.js/src/css/Madeleine.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt;\u0026#39;); Promise.all([lS(\u0026#34;/Madeleine.js/src/lib/stats.js\u0026#34;),lS(\u0026#34;/Madeleine.js/src/lib/detector.js\u0026#34;), lS(\u0026#34;/Madeleine.js/src/lib/three.min.js\u0026#34;), lS(\u0026#34;/Madeleine.js/src/Madeleine.js\u0026#34;)]).then(function() { $(\u0026#39;.view-raw\u0026#39;).attr(\u0026#39;id\u0026#39;, \u0026#39;view-raw\u0026#39;).attr(\u0026#39;style\u0026#39;, \u0026#39;padding: 0;margin-bottom: -10px;\u0026#39;); new Madeleine({ target: \u0026#39;view-raw\u0026#39;, data: $(\u0026#39;.view-raw\u0026gt;a[href$=\u0026#34;.stl\u0026#34; i]\u0026#39;).attr(\u0026#39;href\u0026#39;), path: \u0026#39;/Madeleine.js/src\u0026#39; }); $(\u0026#39;.view-raw\u0026gt;a[href$=\u0026#34;.stl\u0026#34;]\u0026#39;).remove() }); } \u0026lt;/script\u0026gt; to the file templates/custom/footer.tmpl\nYou also need to download the content of the library Madeleine.js and place it under custom/public/ folder.\nYou should end-up with a folder structucture similar to:\ncustom/templates -- custom `-- footer.tmpl custom/public -- Madeleine.js |-- LICENSE |-- README.md |-- css | |-- pygment_trac.css | `-- stylesheet.css |-- examples | |-- ajax.html | |-- index.html | `-- upload.html |-- images | |-- bg_hr.png | |-- blacktocat.png | |-- icon_download.png | `-- sprite_download.png |-- models | |-- dino2.stl | |-- ducati.stl | |-- gallardo.stl | |-- lamp.stl | |-- octocat.stl | |-- skull.stl | `-- treefrog.stl `-- src |-- Madeleine.js |-- css | `-- Madeleine.css |-- icons | |-- logo.png | |-- madeleine.eot | |-- madeleine.svg | |-- madeleine.ttf | `-- madeleine.woff `-- lib |-- MadeleineConverter.js |-- MadeleineLoader.js |-- detector.js |-- stats.js `-- three.min.js Then restart gitea and open a STL file on your gitea instance.\nCustomizing Gitea mails The custom/templates/mail folder allows changing the body of every mail of Gitea. Templates to override can be found in the templates/mail directory of Gitea source. Override by making a copy of the file under custom/templates/mail using a full path structure matching source.\nAny statement contained inside {{ and }} are Gitea\u0026rsquo;s template syntax and shouldn\u0026rsquo;t be touched without fully understanding these components.\nAdding Analytics to Gitea Google Analytics, Matomo (previously Piwik), and other analytics services can be added to Gitea. To add the tracking code, refer to the Other additions to the page section of this document, and add the JavaScript to the custom/templates/custom/header.tmpl file.\nCustomizing gitignores, labels, licenses, locales, and readmes. Place custom files in corresponding sub-folder under custom/options.\nNOTE: The files should not have a file extension, e.g. Labels rather than Labels.txt\ngitignores To add custom .gitignore, add a file with existing .gitignore rules in it to custom/options/gitignore\nLabels To add a custom label set, add a file that follows the label format to custom/options/label\n#hex-color label name ; label description\nLicenses To add a custom license, add a file with the license text to custom/options/license\nLocales Locales are managed via our crowdin.\nYou can override a locale by placing an altered locale file in custom/options/locale.\nGitea\u0026rsquo;s default locale files can be found in the options/locale source folder and these should be used as examples for your changes.\nTo add a completely new locale, as well as placing the file in the above location, you will need to add the new lang and name to the [i18n] section in your app.ini. Keep in mind that Gitea will use those settings as overrides, so if you want to keep the other languages as well you will need to copy/paste the default values and add your own to them.\n[i18n] LANGS = en-US,foo-BAR NAMES = English,FooBar Locales may change between versions, so keeping track of your customized locales is highly encouraged.\nReadmes To add a custom Readme, add a markdown formatted file (without an .md extension) to custom/options/readme\nNOTE: readme templates support variable expansion.\ncurrently there are {Name} (name of repository), {Description}, {CloneURL.SSH}, {CloneURL.HTTPS} and {OwnerName}\nReactions To change reaction emoji\u0026rsquo;s you can set allowed reactions at app.ini\n[ui] REACTIONS = +1, -1, laugh, confused, heart, hooray, eyes A full list of supported emoji\u0026rsquo;s is at emoji list\nCustomizing the look of Gitea As of version 1.6.0 Gitea has built-in themes. The two built-in themes are, the default theme gitea, and a dark theme arc-green. To change the look of your Gitea install change the value of DEFAULT_THEME in the ui section of app.ini to another one of the available options.\nAs of version 1.8.0 Gitea also has per-user themes. The list of themes a user can choose from can be configured with the THEMES value in the ui section of app.ini (defaults to gitea and arc-green, light and dark respectively)\n","permalink":"https://ertlans.github.io/en-us/customizing-gitea/","tags":null,"title":"Customizing Gitea"},{"categories":null,"contents":"You need a database to use Gitea. Gitea supports PostgreSQL, MySQL, SQLite, and MSSQL. This page will guide into preparing database. Only PostgreSQL and MySQL will be covered here since those database engines are widely-used in production.\nDatabase instance can be on same machine as Gitea (local database setup), or on different machine (remote database).\nNote: All steps below requires that the database engine of your choice is installed on your system. For remote database setup, install the server part on database instance and client part on your Gitea server. In addition, make sure you use same engine version for both server and client for some engine features to work. For security reason, protect root (MySQL) or postgres (PostgreSQL) database superuser with secure password. The steps assumes that you run Linux for both database and Gitea servers.\nMySQL   On database instance, login to database console as root:\nmysql -u root -p Enter the password as prompted.\n  Create database user which will be used by Gitea, authenticated by password. This example uses 'gitea' as password. Please use a secure password for your instance.\nFor local database:\nSET old_passwords=0; CREATE USER \u0026#39;gitea\u0026#39; IDENTIFIED BY \u0026#39;gitea\u0026#39;; For remote database:\nSET old_passwords=0; CREATE USER \u0026#39;gitea\u0026#39;@\u0026#39;192.0.2.10\u0026#39; IDENTIFIED BY \u0026#39;gitea\u0026#39;; where 192.0.2.10 is the IP address of your Gitea instance.\nReplace username and password above as appropriate.\n  Create database with UTF-8 charset and collation. Make sure to use utf8mb4 charset instead of utf8 as the former supports all Unicode characters (including emojis) beyond Basic Multilingual Plane. Also, collation chosen depending on your expected content. When in doubt, use either unicode_ci or general_ci.\nCREATE DATABASE giteadb CHARACTER SET \u0026#39;utf8mb4\u0026#39; COLLATE \u0026#39;utf8mb4_unicode_ci\u0026#39;; Replace database name as appropriate.\n  Grant all privileges on the database to database user created above.\nFor local database:\nGRANT ALL PRIVILEGES ON giteadb.* TO \u0026#39;gitea\u0026#39;; FLUSH PRIVILEGES; For remote database:\nGRANT ALL PRIVILEGES ON giteadb.* TO \u0026#39;gitea\u0026#39;@\u0026#39;192.0.2.10\u0026#39;; FLUSH PRIVILEGES;   Quit from database console by exit.\n  On your Gitea server, test connection to the database:\nmysql -u gitea -h 203.0.113.3 -p giteadb where gitea is database username, giteadb is database name, and 203.0.113.3 is IP address of database instance. Omit -h option for local database.\nYou should be connected to the database.\n  PostgreSQL   PostgreSQL uses md5 challenge-response encryption scheme for password authentication by default. Nowadays this scheme is not considered secure anymore. Use SCRAM-SHA-256 scheme instead by editing the postgresql.conf configuration file on the database server to:\npassword_encryption = scram-sha-256 Restart PostgreSQL to apply the setting.\n  On the database server, login to the database console as superuser:\nsu -c \u0026quot;psql\u0026quot; - postgres   Create database user (role in PostgreSQL terms) with login privilege and password. Please use a secure, strong password instead of 'gitea' below:\nCREATE ROLE gitea WITH LOGIN PASSWORD \u0026#39;gitea\u0026#39;; Replace username and password as appropriate.\n  Create database with UTF-8 charset and owned by the database user created earlier. Any libc collations can be specified with LC_COLLATE and LC_CTYPE parameter, depending on expected content:\nCREATE DATABASE giteadb WITH OWNER gitea TEMPLATE template0 ENCODING UTF8 LC_COLLATE \u0026#39;en_US.UTF-8\u0026#39; LC_CTYPE \u0026#39;en_US.UTF-8\u0026#39;; Replace database name as appropriate.\n  Allow the database user to access the database created above by adding the following authentication rule to pg_hba.conf.\nFor local database:\nlocal giteadb gitea scram-sha-256 For remote database:\nhost giteadb gitea 192.0.2.10/32 scram-sha-256 Replace database name, user, and IP address of Gitea instance with your own.\nNote: rules on pg_hba.conf are evaluated sequentially, that is the first matching rule will be used for authentication. Your PostgreSQL installation may come with generic authentication rules that match all users and databases. You may need to place the rules presented here above such generic rules if it is the case.\nRestart PostgreSQL to apply new authentication rules.\n  On your Gitea server, test connection to the database.\nFor local database:\npsql -U gitea -d giteadb For remote database:\npsql \u0026quot;postgres://gitea@203.0.113.3/giteadb\u0026quot; where gitea is database user, giteadb is database name, and 203.0.113.3 is IP address of your database instance.\nYou should be prompted to enter password for the database user, and connected to the database.\n  Database Connection over TLS If the communication between Gitea and your database instance is performed through a private network, or if Gitea and the database are running on the same server, this section can be omitted since the security between Gitea and the database instance is not critically exposed. If instead the database instance is on a public network, use TLS to encrypt the connection to the database, as it is possible for third-parties to intercept the traffic data.\nPrerequisites  You need two valid TLS certificates, one for the database instance (database server) and one for the Gitea instance (database client). Both certificates must be signed by a trusted CA. The database certificate must contain TLS Web Server Authentication in the X509v3 Extended Key Usage extension attribute, while the client certificate needs TLS Web Client Authentication in the corresponding attribute. On the database server certificate, one of Subject Alternative Name or Common Name entries must be the fully-qualified domain name (FQDN) of the database instance (e.g. db.example.com). On the database client certificate, one of the entries mentioned above must contain the database username that Gitea will be using to connect. You need domain name mappings of both Gitea and database servers to their respective IP addresses. Either set up DNS records for them or add local mappings to /etc/hosts (%WINDIR%\\System32\\drivers\\etc\\hosts in Windows) on each system. This allows the database connections to be performed by domain name instead of IP address. See documentation of your system for details.  PostgreSQL The PostgreSQL driver used by Gitea supports two-way TLS. In two-way TLS, both database client and server authenticate each other by sending their respective certificates to their respective opposite for validation. In other words, the server verifies client certificate, and the client verifies server certificate.\n  On the server with the database instance, place the following credentials:\n /path/to/postgresql.crt: Database instance certificate /path/to/postgresql.key: Database instance private key /path/to/root.crt: CA certificate chain to validate client certificates    Add following options to postgresql.conf:\nssl = on ssl_ca_file = \u0026#39;/path/to/root.crt\u0026#39; ssl_cert_file = \u0026#39;/path/to/postgresql.crt\u0026#39; ssl_key_file = \u0026#39;/path/to/postgresql.key\u0026#39; ssl_min_protocol_version = \u0026#39;TLSv1.2\u0026#39;   Adjust credentials ownership and permission, as required by PostgreSQL:\nchown postgres:postgres /path/to/root.crt /path/to/postgresql.crt /path/to/postgresql.key chmod 0600 /path/to/root.crt /path/to/postgresql.crt /path/to/postgresql.key   Edit pg_hba.conf rule to only allow Gitea database user to connect over SSL, and to require client certificate verification.\nFor PostgreSQL 12:\nhostssl giteadb gitea 192.0.2.10/32 scram-sha-256 clientcert=verify-full For PostgreSQL 11 and earlier:\nhostssl giteadb gitea 192.0.2.10/32 scram-sha-256 clientcert=1 Replace database name, user, and IP address of Gitea instance as appropriate.\n  Restart PostgreSQL to apply configurations above.\n  On the server running the Gitea instance, place the following credentials under the home directory of the user who runs Gitea (e.g. git):\n ~/.postgresql/postgresql.crt: Database client certificate ~/.postgresql/postgresql.key: Database client private key ~/.postgresql/root.crt: CA certificate chain to validate server certificate  Note: Those file names above are hardcoded in PostgreSQL and it is not possible to change them.\n  Adjust credentials, ownership and permission as required:\nchown git:git ~/.postgresql/postgresql.crt ~/.postgresql/postgresql.key ~/.postgresql/root.crt chown 0600 ~/.postgresql/postgresql.crt ~/.postgresql/postgresql.key ~/.postgresql/root.crt   Test the connection to the database:\npsql \u0026quot;postgres://gitea@example.db/giteadb?sslmode=verify-full\u0026quot; You should be prompted to enter password for the database user, and then be connected to the database.\n  MySQL While the MySQL driver used by Gitea also supports two-way TLS, Gitea currently supports only one-way TLS. See issue #10828 for details.\nIn one-way TLS, the database client verifies the certificate sent from server during the connection handshake, and the server assumes that the connected client is legitimate, since client certificate verification doesn\u0026rsquo;t take place.\n  On the database instance, place the following credentials:\n /path/to/mysql.crt: Database instance certificate /path/to/mysql.key: Database instance key /path/to/ca.crt: CA certificate chain. This file isn\u0026rsquo;t used on one-way TLS, but is used to validate client certificates on two-way TLS.    Add following options to my.cnf:\n[mysqld] ssl-ca = /path/to/ca.crt ssl-cert = /path/to/mysql.crt ssl-key = /path/to/mysql.key tls-version = TLSv1.2,TLSv1.3   Adjust credentials ownership and permission:\nchown mysql:mysql /path/to/ca.crt /path/to/mysql.crt /path/to/mysql.key chmod 0600 /path/to/ca.crt /path/to/mysql.crt /path/to/mysql.key   Restart MySQL to apply the setting.\n  The database user for Gitea may have been created earlier, but it would authenticate only against the IP addresses of the server running Gitea. To authenticate against its domain name, recreate the user, and this time also set it to require TLS for connecting to the database:\nDROP USER \u0026#39;gitea\u0026#39;@\u0026#39;192.0.2.10\u0026#39;; CREATE USER \u0026#39;gitea\u0026#39;@\u0026#39;example.gitea\u0026#39; IDENTIFIED BY \u0026#39;gitea\u0026#39; REQUIRE SSL; GRANT ALL PRIVILEGES ON giteadb.* TO \u0026#39;gitea\u0026#39;@\u0026#39;example.gitea\u0026#39;; FLUSH PRIVILEGES; Replace database user name, password, and Gitea instance domain as appropriate.\n  Make sure that the CA certificate chain required to validate the database server certificate is on the system certificate store of both the database and Gitea servers. Consult your system documentation for instructions on adding a CA certificate to the certificate store.\n  On the server running Gitea, test connection to the database:\nmysql -u gitea -h example.db -p --ssl You should be connected to the database.\n  ","permalink":"https://ertlans.github.io/en-us/database-prep/","tags":null,"title":"Database Preparation"},{"categories":null,"contents":"Support Options  Discord Discourse Forum  NOTE: When asking for support, it may be a good idea to have the following available so that the person helping has all the info they need:\n Your app.ini (with any sensitive data scrubbed as necessary) The gitea.log (and any other appropriate log files for the situation)   e.g. If the error is related to the database, the xorm.log might be helpful  Any error messages you are seeing When possible, try to replicate the issue on try.gitea.io and include steps so that others can reproduce the issue.   This will greatly improve the chance that the root of the issue can be quickly discovered and resolved.  Bugs If you found a bug, please create an issue on GitHub.\nChinese Support Support for the Chinese language is provided at gocn.vip.\n","permalink":"https://ertlans.github.io/en-us/seek-help/","tags":null,"title":"Support Options"},{"categories":null,"contents":"Run Gitea as Linux service You can run Gitea as service, using either systemd or supervisor. The steps below tested on Ubuntu 16.04, but those should work on any Linux distributions (with little modification).\nUsing systemd Copy the sample gitea.service to /etc/systemd/system/gitea.service, then edit the file with your favorite editor.\nUncomment any service that needs to be enabled on this host, such as MySQL.\nChange the user, home directory, and other required startup values. Change the PORT or remove the -p flag if default port is used.\nEnable and start Gitea at boot:\nsudo systemctl enable gitea sudo systemctl start gitea If you have systemd version 220 or later, you can enable and immediately start Gitea at once by:\nsudo systemctl enable gitea --now Using supervisor Install supervisor by running below command in terminal:\nsudo apt install supervisor Create a log dir for the supervisor logs:\n# assuming Gitea is installed in /home/git/gitea/ mkdir /home/git/gitea/log/supervisor Append the configuration from the sample supervisord config to /etc/supervisor/supervisord.conf.\nUsing your favorite editor, change the user (git) and home (/home/git) settings to match the deployment environment. Change the PORT or remove the -p flag if default port is used.\nLastly enable and start supervisor at boot:\nsudo systemctl enable supervisor sudo systemctl start supervisor If you have systemd version 220 or later, you can enable and immediately start supervisor by:\nsudo systemctl enable supervisor --now ","permalink":"https://ertlans.github.io/en-us/linux-service/","tags":null,"title":"Run as service in Linux"},{"categories":null,"contents":"Installation from binary All downloads come with SQLite, MySQL and PostgreSQL support, and are built with embedded assets. This can be different for older releases. Choose the file matching the destination platform from the downloads page, copy the URL and replace the URL within the commands below:\nwget -O gitea https://dl.gitea.io/gitea/1.11.4/gitea-1.11.4-linux-amd64 chmod +x gitea Verify GPG signature Gitea signs all binaries with a GPG key to prevent against unwanted modification of binaries. To validate the binary, download the signature file which ends in .asc for the binary you downloaded and use the gpg command line tool.\ngpg --keyserver keys.openpgp.org --recv 7C9E68152594688862D62AF62D9AE806EC1592E2 gpg --verify gitea-1.11.4-linux-amd64.asc gitea-1.11.4-linux-amd64 Recommended server configuration NOTE: Many of the following directories can be configured using Environment Variables as well! Of note, configuring GITEA_WORK_DIR will tell Gitea where to base its working directory, as well as ease installation.\nPrepare environment Check that Git is installed on the server. If it is not, install it first.\ngit --version Create user to run Gitea (ex. git)\nadduser \\  --system \\  --shell /bin/bash \\  --gecos \u0026#39;Git Version Control\u0026#39; \\  --group \\  --disabled-password \\  --home /home/git \\  git Create required directory structure mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea NOTE: /etc/gitea is temporary set with write rights for user git so that Web installer could write configuration file. After installation is done, it is recommended to set rights to read-only using:\nchmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini If you don\u0026rsquo;t want the web installer to be able to write the config file at all, it is also possible to make the config file read-only for the gitea user (owner/group root:root, mode 0660), and set INSTALL_LOCK = true. In that case all database configuration details must be set beforehand in the config file, as well as the SECRET_KEY and INTERNAL_TOKEN values. See the command line documentation for information on using gitea generate secret INTERNAL_TOKEN.\nConfigure Gitea\u0026rsquo;s working directory NOTE: If you plan on running Gitea as a Linux service, you can skip this step as the service file allows you to set WorkingDirectory. Otherwise, consider setting this environment variable (semi-)permanently so that Gitea consistently uses the correct working directory.\nexport GITEA_WORK_DIR=/var/lib/gitea/ Copy Gitea binary to global location cp gitea /usr/local/bin/gitea Running Gitea After the above steps, two options to run Gitea are:\n1. Creating a service file to start Gitea automatically (recommended) See how to create Linux service\n2. Running from command-line/terminal GITEA_WORK_DIR=/var/lib/gitea/ /usr/local/bin/gitea web -c /etc/gitea/app.ini Updating to a new version You can update to a new version of Gitea by stopping Gitea, replacing the binary at /usr/local/bin/gitea and restarting the instance. The binary file name should not be changed during the update to avoid problems in existing repositories.\nIt is recommended you do a backup before updating your installation.\nIf you have carried out the installation steps as described above, the binary should have the generic name gitea. Do not change this, i.e. to include the version number.\nSee below for troubleshooting instructions to repair broken repositories after an update of your Gitea version.\nTroubleshooting Old glibc versions Older Linux distributions (such as Debian 7 and CentOS 6) may not be able to load the Gitea binary, usually producing an error such as ./gitea: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC\\_2.14' not found (required by ./gitea). This is due to the integrated SQLite support in the binaries provided by dl.gitea.io. In this situation, it is usually possible to install from source without sqlite support.\nRunning Gitea on another port For errors like 702 runWeb()] [E] Failed to start server: listen tcp 0.0.0.0:3000: bind: address already in use Gitea needs to be started on another free port. This is possible using ./gitea web -p $PORT. It\u0026rsquo;s possible another instance of Gitea is already running.\nRunning Gitea on Raspbian As of v1.8, there is a problem with the arm7 version of Gitea and it doesn\u0026rsquo;t run on Raspberry Pi and similar devices.\nIt is therefore recommended to switch to the arm6 version which has been tested and shown to work on Raspberry Pi and similar devices.\nGit error after updating to a new version of Gitea If the binary file name has been changed during the update to a new version of Gitea, git hooks in existing repositories will not work any more. In that case, a git error will be displayed when pushing to the repository.\nremote: ./hooks/pre-receive.d/gitea: line 2: [...]: No such file or directory The [...] part of the error message will contain the path to your previous Gitea binary.\nTo solve this, go to the admin options and run the task Resynchronize pre-receive, update and post-receive hooks of all repositories to update all hooks to contain the new binary path. Please note that this overwrite all git hooks including ones with customizations made.\nIf you aren\u0026rsquo;t using the built-in to Gitea SSH server you will also need to re-write the authorized key file by running the Update the '.ssh/authorized_keys' file with Gitea SSH keys. task in the admin options.\n","permalink":"https://ertlans.github.io/en-us/install-from-binary/","tags":null,"title":"Installation from binary"},{"categories":null,"contents":"Make Gitea makes heavy use of Make to automate tasks and improve development. This guide covers how to install Make.\nOn Linux Install with the package manager.\nOn Ubuntu/Debian:\nsudo apt-get install make On Fedora/RHEL/CentOS:\nsudo yum install make On Windows One of these three distributions of Make will run on Windows:\n Single binary build. Copy somewhere and add to PATH.  32-bits version 64-bits version   MinGW includes a build.  The binary is called mingw32-make.exe instead of make.exe. Add the bin folder to PATH.   Chocolatey package. Run choco install make  ","permalink":"https://ertlans.github.io/en-us/make/","tags":null,"title":"Make"},{"categories":null,"contents":"Command Line Usage gitea [global options] command [command or global options] [arguments...]\nGlobal options All global options can be placed at the command level.\n --help, -h: Show help text and exit. Optional. --version, -v: Show version and exit. Optional. (example: Gitea version 1.1.0+218-g7b907ed built with: bindata, sqlite). --custom-path path, -C path: Location of the Gitea custom folder. Optional. (default: AppWorkPath/custom or $GITEA_CUSTOM). --config path, -c path: Gitea configuration file path. Optional. (default: custom/conf/app.ini). --work-path path, -w path: Gitea AppWorkPath. Optional. (default: LOCATION_OF_GITEA_BINARY or $GITEA_WORK_DIR)  NB: The defaults custom-path, config and work-path can also be changed at build time (if preferred).\nCommands web Starts the server:\n Options:  --port number, -p number: Port number. Optional. (default: 3000). Overrides configuration file. --pid path, -P path: Pidfile path. Optional.   Examples:  gitea web gitea web --port 80 gitea web --config /etc/gitea.ini --pid /var/run/gitea.pid   Notes:  Gitea should not be run as root. To bind to a port below 1024, you can use setcap on Linux: sudo setcap 'cap_net_bind_service=+ep' /path/to/gitea. This will need to be redone every time you update Gitea.    admin Admin operations:\n Commands:  create-user  Options:  --name value: Username. Required. As of gitea 1.9.0, use the --username flag instead. --username value: Username. Required. New in gitea 1.9.0. --password value: Password. Required. --email value: Email. Required. --admin: If provided, this makes the user an admin. Optional. --access-token: If provided, an access token will be created for the user. Optional. (default: false). --must-change-password: If provided, the created user will be required to choose a newer password after the initial login. Optional. (default: true). --random-password: If provided, a randomly generated password will be used as the password of the created user. The value of --password will be discarded. Optional. --random-password-length: If provided, it will be used to configure the length of the randomly generated password. Optional. (default: 12)   Examples:  gitea admin create-user --username myname --password asecurepassword --email me@example.com     change-password  Options:  --username value, -u value: Username. Required. --password value, -p value: New password. Required.   Examples:  gitea admin change-password --username myname --password asecurepassword     regenerate  Options:  hooks: Regenerate git-hooks for all repositories keys: Regenerate authorized_keys file   Examples:  gitea admin regenerate hooks gitea admin regenerate keys     auth:  list:  Description: lists all external authentication sources that exist Examples:  gitea admin auth list     delete:  Options:  --id: ID of source to be deleted. Required.   Examples:  gitea admin auth delete --id 1     add-oauth:  Options:  --name: Application Name. --provider: OAuth2 Provider. --key: Client ID (Key). --secret: Client Secret. --auto-discover-url: OpenID Connect Auto Discovery URL (only required when using OpenID Connect as provider). --use-custom-urls: Use custom URLs for GitLab/GitHub OAuth endpoints. --custom-auth-url: Use a custom Authorization URL (option for GitLab/GitHub). --custom-token-url: Use a custom Token URL (option for GitLab/GitHub). --custom-profile-url: Use a custom Profile URL (option for GitLab/GitHub). --custom-email-url: Use a custom Email URL (option for GitHub).   Examples:  gitea admin auth add-oauth --name external-github --provider github --key OBTAIN_FROM_SOURCE --secret OBTAIN_FROM_SOURCE     update-oauth:  Options:  --id: ID of source to be updated. Required. --name: Application Name. --provider: OAuth2 Provider. --key: Client ID (Key). --secret: Client Secret. --auto-discover-url: OpenID Connect Auto Discovery URL (only required when using OpenID Connect as provider). --use-custom-urls: Use custom URLs for GitLab/GitHub OAuth endpoints. --custom-auth-url: Use a custom Authorization URL (option for GitLab/GitHub). --custom-token-url: Use a custom Token URL (option for GitLab/GitHub). --custom-profile-url: Use a custom Profile URL (option for GitLab/GitHub). --custom-email-url: Use a custom Email URL (option for GitHub).   Examples:  gitea admin auth update-oauth --id 1 --name external-github-updated     add-ldap: Add new LDAP (via Bind DN) authentication source  Options:  --name value: Authentication name. Required. --not-active: Deactivate the authentication source. --security-protocol value: Security protocol name. Required. --skip-tls-verify: Disable TLS verification. --host value: The address where the LDAP server can be reached. Required. --port value: The port to use when connecting to the LDAP server. Required. --user-search-base value: The LDAP base at which user accounts will be searched for. Required. --user-filter value: An LDAP filter declaring how to find the user record that is attempting to authenticate. Required. --admin-filter value: An LDAP filter specifying if a user should be given administrator privileges. --restricted-filter value: An LDAP filter specifying if a user should be given restricted status. --username-attribute value: The attribute of the user’s LDAP record containing the user name. --firstname-attribute value: The attribute of the user’s LDAP record containing the user’s first name. --surname-attribute value: The attribute of the user’s LDAP record containing the user’s surname. --email-attribute value: The attribute of the user’s LDAP record containing the user’s email address. Required. --public-ssh-key-attribute value: The attribute of the user’s LDAP record containing the user’s public ssh key. --bind-dn value: The DN to bind to the LDAP server with when searching for the user. --bind-password value: The password for the Bind DN, if any. --attributes-in-bind: Fetch attributes in bind DN context. --synchronize-users: Enable user synchronization. --page-size value: Search page size.   Examples:  gitea admin auth add-ldap --name ldap --security-protocol unencrypted --host mydomain.org --port 389 --user-search-base \u0026quot;ou=Users,dc=mydomain,dc=org\u0026quot; --user-filter \u0026quot;(\u0026amp;(objectClass=posixAccount)(uid=%s))\u0026quot; --email-attribute mail     update-ldap: Update existing LDAP (via Bind DN) authentication source  Options:  --id value: ID of authentication source. Required. --name value: Authentication name. --not-active: Deactivate the authentication source. --security-protocol value: Security protocol name. --skip-tls-verify: Disable TLS verification. --host value: The address where the LDAP server can be reached. --port value: The port to use when connecting to the LDAP server. --user-search-base value: The LDAP base at which user accounts will be searched for. --user-filter value: An LDAP filter declaring how to find the user record that is attempting to authenticate. --admin-filter value: An LDAP filter specifying if a user should be given administrator privileges. --restricted-filter value: An LDAP filter specifying if a user should be given restricted status. --username-attribute value: The attribute of the user’s LDAP record containing the user name. --firstname-attribute value: The attribute of the user’s LDAP record containing the user’s first name. --surname-attribute value: The attribute of the user’s LDAP record containing the user’s surname. --email-attribute value: The attribute of the user’s LDAP record containing the user’s email address. --public-ssh-key-attribute value: The attribute of the user’s LDAP record containing the user’s public ssh key. --bind-dn value: The DN to bind to the LDAP server with when searching for the user. --bind-password value: The password for the Bind DN, if any. --attributes-in-bind: Fetch attributes in bind DN context. --synchronize-users: Enable user synchronization. --page-size value: Search page size.   Examples:  gitea admin auth update-ldap --id 1 --name \u0026quot;my ldap auth source\u0026quot; gitea admin auth update-ldap --id 1 --username-attribute uid --firstname-attribute givenName --surname-attribute sn     add-ldap-simple: Add new LDAP (simple auth) authentication source  Options:  --name value: Authentication name. Required. --not-active: Deactivate the authentication source. --security-protocol value: Security protocol name. Required. --skip-tls-verify: Disable TLS verification. --host value: The address where the LDAP server can be reached. Required. --port value: The port to use when connecting to the LDAP server. Required. --user-search-base value: The LDAP base at which user accounts will be searched for. --user-filter value: An LDAP filter declaring how to find the user record that is attempting to authenticate. Required. --admin-filter value: An LDAP filter specifying if a user should be given administrator privileges. --restricted-filter value: An LDAP filter specifying if a user should be given restricted status. --username-attribute value: The attribute of the user’s LDAP record containing the user name. --firstname-attribute value: The attribute of the user’s LDAP record containing the user’s first name. --surname-attribute value: The attribute of the user’s LDAP record containing the user’s surname. --email-attribute value: The attribute of the user’s LDAP record containing the user’s email address. Required. --public-ssh-key-attribute value: The attribute of the user’s LDAP record containing the user’s public ssh key. --user-dn value: The user’s DN. Required.   Examples:  gitea admin auth add-ldap-simple --name ldap --security-protocol unencrypted --host mydomain.org --port 389 --user-dn \u0026quot;cn=%s,ou=Users,dc=mydomain,dc=org\u0026quot; --user-filter \u0026quot;(\u0026amp;(objectClass=posixAccount)(cn=%s))\u0026quot; --email-attribute mail     update-ldap-simple: Update existing LDAP (simple auth) authentication source  Options:  --id value: ID of authentication source. Required. --name value: Authentication name. --not-active: Deactivate the authentication source. --security-protocol value: Security protocol name. --skip-tls-verify: Disable TLS verification. --host value: The address where the LDAP server can be reached. --port value: The port to use when connecting to the LDAP server. --user-search-base value: The LDAP base at which user accounts will be searched for. --user-filter value: An LDAP filter declaring how to find the user record that is attempting to authenticate. --admin-filter value: An LDAP filter specifying if a user should be given administrator privileges. --restricted-filter value: An LDAP filter specifying if a user should be given restricted status. --username-attribute value: The attribute of the user’s LDAP record containing the user name. --firstname-attribute value: The attribute of the user’s LDAP record containing the user’s first name. --surname-attribute value: The attribute of the user’s LDAP record containing the user’s surname. --email-attribute value: The attribute of the user’s LDAP record containing the user’s email address. --public-ssh-key-attribute value: The attribute of the user’s LDAP record containing the user’s public ssh key. --user-dn value: The user’s DN.   Examples:  gitea admin auth update-ldap-simple --id 1 --name \u0026quot;my ldap auth source\u0026quot; gitea admin auth update-ldap-simple --id 1 --username-attribute uid --firstname-attribute givenName --surname-attribute sn          cert Generates a self-signed SSL certificate. Outputs to cert.pem and key.pem in the current directory and will overwrite any existing files.\n Options:  --host value: Comma seperated hostnames and ips which this certificate is valid for. Wildcards are supported. Required. --ecdsa-curve value: ECDSA curve to use to generate a key. Optional. Valid options are P224, P256, P384, P521. --rsa-bits value: Size of RSA key to generate. Optional. Ignored if \u0026ndash;ecdsa-curve is set. (default: 2048). --start-date value: Creation date. Optional. (format: Jan 1 15:04:05 2011). --duration value: Duration which the certificate is valid for. Optional. (default: 8760h0m0s) --ca: If provided, this cert generates it\u0026rsquo;s own certificate authority. Optional.   Examples:  gitea cert --host git.example.com,example.com,www.example.com --ca    dump Dumps all files and databases into a zip file. Outputs into a file like gitea-dump-1482906742.zip in the current directory.\n Options:  --file name, -f name: Name of the dump file with will be created. Optional. (default: gitea-dump-[timestamp].zip). --tempdir path, -t path: Path to the temporary directory used. Optional. (default: /tmp). --skip-repository, -R: Skip the repository dumping. Optional. --database, -d: Specify the database SQL syntax. Optional. --verbose, -V: If provided, shows additional details. Optional.   Examples:  gitea dump gitea dump --verbose    generate Generates random values and tokens for usage in configuration file. Useful for generating values for automatic deployments.\n Commands:  secret:  Options:  INTERNAL_TOKEN: Token used for an internal API call authentication. JWT_SECRET: LFS \u0026amp; OAUTH2 JWT authentication secret (LFS_JWT_SECRET is aliased to this option for backwards compatibility). SECRET_KEY: Global secret key.   Examples:  gitea generate secret INTERNAL_TOKEN gitea generate secret JWT_SECRET gitea generate secret SECRET_KEY        keys Provides an SSHD AuthorizedKeysCommand. Needs to be configured in the sshd config file:\n... # The value of -e and the AuthorizedKeysCommandUser should match the # username running gitea AuthorizedKeysCommandUser git AuthorizedKeysCommand /path/to/gitea keys -e git -u %u -t %t -k %k The command will return the appropriate authorized_keys line for the provided key. You should also set the value SSH_CREATE_AUTHORIZED_KEYS_FILE=false in the [server] section of app.ini.\nNB: opensshd requires the gitea program to be owned by root and not writable by group or others. The program must be specified by an absolute path. NB: Gitea must be running for this command to succeed.\nmigrate Migrates the database. This command can be used to run other commands before starting the server for the first time.\nThis command is idempotent.\nconvert Converts an existing MySQL database from utf8 to utf8mb4.\ndoctor Diagnose the problems of current gitea instance according the given configuration. Currently there are a check list below:\n Check if OpenSSH authorized_keys file id correct When your gitea instance support OpenSSH, your gitea instance binary path will be written to authorized_keys when there is any public key added or changed on your gitea instance. Sometimes if you moved or renamed your gitea binary when upgrade and you haven\u0026rsquo;t run Update the '.ssh/authorized_keys' file with Gitea SSH keys. (Not needed for the built-in SSH server.) on your Admin Panel. Then all pull/push via SSH will not be work. This check will help you to check if it works well.  For contributors, if you want to add more checks, you can wrie ad new function like func(ctx *cli.Context) ([]string, error) and append it to doctor.go.\nvar checklist = []check{ { title: \u0026#34;Check if OpenSSH authorized_keys file id correct\u0026#34;, f: runDoctorLocationMoved, }, // more checks please append here } This function will receive a command line context and return a list of details about the problems or error.\n","permalink":"https://ertlans.github.io/en-us/command-line/","tags":null,"title":"Usage: Command Line"},{"categories":null,"contents":"Prerequisites The following changes are made in C:\\gitea\\custom\\conf\\app.ini:\nRUN_USER = COMPUTERNAME$ Sets Gitea to run as the local system user.\nCOMPUTERNAME is whatever the response is from echo %COMPUTERNAME% on the command line. If the response is USER-PC then RUN_USER = USER-PC$\nUse absolute paths If you use sqlite3, change the PATH to include the full path:\n[database] PATH = c:/gitea/data/gitea.db Register as a Windows Service To register Gitea as a Windows service, open a command prompt (cmd) as an Administrator, then run the following command:\nsc.exe create gitea start= auto binPath= \u0026quot;\\\u0026quot;C:\\gitea\\gitea.exe\\\u0026quot; web --config \\\u0026quot;C:\\gitea\\custom\\conf\\app.ini\\\u0026quot;\u0026quot; Do not forget to replace C:\\gitea with the correct Gitea directory.\nOpen \u0026ldquo;Windows Services\u0026rdquo;, search for the service named \u0026ldquo;gitea\u0026rdquo;, right-click it and click on \u0026ldquo;Run\u0026rdquo;. If everything is OK, Gitea will be reachable on http://localhost:3000 (or the port that was configured).\nUnregister as a service To unregister Gitea as a service, open a command prompt (cmd) as an Administrator and run:\nsc.exe delete gitea ","permalink":"https://ertlans.github.io/en-us/windows-service/","tags":null,"title":"Register as a Windows Service"},{"categories":null,"contents":"Authentication LDAP (Lightweight Directory Access Protocol) Both the LDAP via BindDN and the simple auth LDAP share the following fields:\n  Authorization Name (required)\n A name to assign to the new method of authorization.    Host (required)\n The address where the LDAP server can be reached. Example: mydomain.com    Port (required)\n The port to use when connecting to the server. Example: 389 for LDAP or 636 for LDAP SSL    Enable TLS Encryption (optional)\n Whether to use TLS when connecting to the LDAP server.    Admin Filter (optional)\n An LDAP filter specifying if a user should be given administrator privileges. If a user account passes the filter, the user will be privileged as an administrator. Example: (objectClass=adminAccount) Example for Microsoft Active Directory (AD): (memberOf=CN=admin-group,OU=example,DC=example,DC=org)    Username attribute (optional)\n The attribute of the user\u0026rsquo;s LDAP record containing the user name. Given attribute value will be used for new Gitea account user name after first successful sign-in. Leave empty to use login name given on sign-in form. This is useful when supplied login name is matched against multiple attributes, but only single specific attribute should be used for Gitea account name, see \u0026ldquo;User Filter\u0026rdquo;. Example: uid Example for Microsoft Active Directory (AD): sAMAccountName    First name attribute (optional)\n The attribute of the user\u0026rsquo;s LDAP record containing the user\u0026rsquo;s first name. This will be used to populate their account information. Example: givenName    Surname attribute (optional)\n The attribute of the user\u0026rsquo;s LDAP record containing the user\u0026rsquo;s surname. This will be used to populate their account information. Example: sn    E-mail attribute (required)\n The attribute of the user\u0026rsquo;s LDAP record containing the user\u0026rsquo;s email address. This will be used to populate their account information. Example: mail    LDAP via BindDN adds the following fields:\n  Bind DN (optional)\n The DN to bind to the LDAP server with when searching for the user. This may be left blank to perform an anonymous search. Example: cn=Search,dc=mydomain,dc=com    Bind Password (optional)\n The password for the Bind DN specified above, if any. Note: The password is stored in plaintext at the server. As such, ensure that the Bind DN has as few privileges as possible.    User Search Base (required)\n The LDAP base at which user accounts will be searched for. Example: ou=Users,dc=mydomain,dc=com    User Filter (required)\n An LDAP filter declaring how to find the user record that is attempting to authenticate. The %s matching parameter will be substituted with login name given on sign-in form. Example: (\u0026amp;(objectClass=posixAccount)(uid=%s)) Example for Microsoft Active Directory (AD): (\u0026amp;(objectCategory=Person)(memberOf=CN=user-group,OU=example,DC=example,DC=org)(sAMAccountName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))) To substitute more than once, %[1]s should be used instead, e.g. when matching supplied login name against multiple attributes such as user identifier, email or even phone number. Example: (\u0026amp;(objectClass=Person)(|(uid=%[1]s)(mail=%[1]s)(mobile=%[1]s)))    Enable user synchronization\n This option enables a periodic task that synchronizes the Gitea users with the LDAP server. The default period is every 24 hours but that can be changed in the app.ini file. See the cron.sync_external_users section in the sample app.ini for detailed comments about that section. The User Search Base and User Filter settings described above will limit which users can use Gitea and which users will be synchronized. When initially run the task will create all LDAP users that match the given settings so take care if working with large Enterprise LDAP directories.    LDAP using simple auth adds the following fields:\n  User DN (required)\n A template to use as the user\u0026rsquo;s DN. The %s matching parameter will be substituted with login name given on sign-in form. Example: cn=%s,ou=Users,dc=mydomain,dc=com Example: uid=%s,ou=Users,dc=mydomain,dc=com    User Search Base (optional)\n The LDAP base at which user accounts will be searched for. Example: ou=Users,dc=mydomain,dc=com    User Filter (required)\n An LDAP filter declaring when a user should be allowed to log in. The %s matching parameter will be substituted with login name given on sign-in form. Example: (\u0026amp;(objectClass=posixAccount)(cn=%s)) Example: (\u0026amp;(objectClass=posixAccount)(uid=%s))    Verify group membership in LDAP uses the following fields:\n  Group Search Base (optional)\n The LDAP DN used for groups. Example: ou=group,dc=mydomain,dc=com    Group Name Filter (optional)\n An LDAP filter declaring how to find valid groups in the above DN. Example: (|(cn=gitea_users)(cn=admins))    User Attribute in Group (optional)\n Which user LDAP attribute is listed in the group. Example: uid    Group Attribute for User (optional)\n Which group LDAP attribute contains an array above user attribute names. Example: memberUid    PAM (Pluggable Authentication Module) To configure PAM, set the \u0026lsquo;PAM Service Name\u0026rsquo; to a filename in /etc/pam.d/. To work with normal Linux passwords, the user running Gitea must have read access to /etc/shadow.\nSMTP (Simple Mail Transfer Protocol) This option allows Gitea to log in to an SMTP host as a Gitea user. To configure this, set the fields below:\n  Authentication Name (required)\n A name to assign to the new method of authorization.    SMTP Authentication Type (required)\n Type of authentication to use to connect to SMTP host, PLAIN or LOGIN.    Host (required)\n The address where the SMTP host can be reached. Example: smtp.mydomain.com    Port (required)\n The port to use when connecting to the server. Example: 587    Allowed Domains\n Restrict what domains can log in if using a public SMTP host or SMTP host with multiple domains. Example: gitea.io,mydomain.com,mydomain2.com    Enable TLS Encryption\n Enable TLS encryption on authentication.    Skip TLS Verify\n Disable TLS verify on authentication.    This authentication is activate\n Enable or disable this auth.    FreeIPA   In order to log in to Gitea using FreeIPA credentials, a bind account needs to be created for Gitea:\n  On the FreeIPA server, create a gitea.ldif file, replacing dc=example,dc=com with your DN, and provide an appropriately secure password:\n   dn: uid=gitea,cn=sysaccounts,cn=etc,dc=example,dc=com changetype: add objectclass: account objectclass: simplesecurityobject uid: gitea userPassword: secure password passwordExpirationTime: 20380119031407Z nsIdleTimeout: 0  Import the LDIF (change localhost to an IPA server if needed). A prompt for Directory Manager password will be presented:   ldapmodify -h localhost -p 389 -x -D \\ \u0026quot;cn=Directory Manager\u0026quot; -W -f gitea.ldif  Add an IPA group for gitea_users :   ipa group-add --desc=\u0026quot;Gitea Users\u0026quot; gitea_users   Note: For errors about IPA credentials, run kinit admin and provide the domain admin account password.\n  Log in to Gitea as an Administrator and click on \u0026ldquo;Authentication\u0026rdquo; under Admin Panel. Then click Add New Source and fill in the details, changing all where appropriate.\n  SPNEGO with SSPI (Kerberos/NTLM, for Windows only) Gitea supports SPNEGO single sign-on authentication (the scheme defined by RFC4559) for the web part of the server via the Security Support Provider Interface (SSPI) built in Windows. SSPI works only in Windows environments - when both the server and the clients are running Windows.\nBefore activating SSPI single sign-on authentication (SSO) you have to prepare your environment:\n  Create a separate user account in active directory, under which the gitea.exe process will be running (eg. user under domain domain.local):\n  Create a service principal name for the host where gitea.exe is running with class HTTP:\n Start Command Prompt or PowerShell as a priviledged domain user (eg. Domain Administrator) Run the command below, replacing host.domain.local with the fully qualified domain name (FQDN) of the server where the web application will be running, and domain\\user with the name of the account created in the previous step:   setspn -A HTTP/host.domain.local domain\\user   Sign in (sign out if you were already signed in) with the user created\n  Make sure that ROOT_URL in the [server] section of custom/conf/app.ini is the fully qualified domain name of the server where the web application will be running - the same you used when creating the service principal name (eg. host.domain.local)\n  Start the web server (gitea.exe web)\n  Enable SSPI authentication by adding an SPNEGO with SSPI authentication source in Site Administration -\u0026gt; Authentication Sources\n  Sign in to a client computer in the same domain with any domain user (client computer, different from the server running gitea.exe)\n  If you are using Chrome, Edge or Internet Explorer, add the URL of the web app to the Local intranet sites (Internet Options -\u0026gt; Security -\u0026gt; Local intranet -\u0026gt; Sites)\n  Start Chrome, Edge or Internet Explorer and navigate to the FQDN URL of gitea (eg. http://host.domain.local:3000)\n  Click the Sign In button on the dashboard and choose SSPI to be automatically logged in with the same user that is currently logged on to the computer\n  If it does not work, make sure that:\n You are not running the web browser on the same server where gitea is running. You should be running the web browser on a domain joined computer (client) that is different from the server. If both the client and server are runnning on the same computer NTLM will be prefered over Kerberos. There is only one HTTP/... SPN for the host The SPN contains only the hostname, without the port You have added the URL of the web app to the Local intranet zone The clocks of the server and client should not differ with more than 5 minutes (depends on group policy) Integrated Windows Authentication should be enabled in Internet Explorer (under Advanced settings)    ","permalink":"https://ertlans.github.io/en-us/authentication/","tags":null,"title":"Authentication"},{"categories":null,"contents":"Hacking on Gitea Installing go and setting the GOPATH You should install go and set up your go environment correctly. In particular, it is recommended to set the $GOPATH environment variable and to add the go bin directory or directories ${GOPATH//://bin:}/bin to the $PATH. See the Go wiki entry for GOPATH.\nNext, install Node.js with npm which is required to build the JavaScript and CSS files. The minimum supported Node.js version is 10 and the latest LTS version is recommended.\nYou will also need make. (See here how to get Make)Note: When executing make tasks that require external tools, like make misspell-check, Gitea will automatically download and build these as necessary. To be able to use these you must have the \u0026quot;$GOPATH\u0026quot;/bin directory on the executable path. If you don\u0026rsquo;t add the go bin directory to the executable path you will have to manage this yourself.\nNote 2: Go version 1.12 or higher is required; however, it is important to note that our continuous integration will check that the formatting of the source code is not changed by gofmt using make fmt-check. Unfortunately, the results of gofmt can differ by the version of go. It is therefore recommended to install the version of Go that our continuous integration is running. As of last update, it should be Go version 1.14 .\nDownloading and cloning the Gitea source code The recommended method of obtaining the source code is by using git clone.\ngit clone https://github.com/go-gitea/gitea (Since the advent of go modules, it is no longer necessary to build go projects from within the $GOPATH, hence the go get approach is no longer recommended.)\nForking Gitea Download the master Gitea source code as above. Then, fork the Gitea repository on GitHub, and either switch the git remote origin for your fork or add your fork as another remote:\n# Rename original Gitea origin to upstream git remote rename origin upstream git remote add origin \u0026#34;git@github.com:$GITHUB_USERNAME/gitea.git\u0026#34; git fetch --all --prune or:\n# Add new remote for our fork git remote add \u0026#34;$FORK_NAME\u0026#34; \u0026#34;git@github.com:$GITHUB_USERNAME/gitea.git\u0026#34; git fetch --all --prune To be able to create pull requests, the forked repository should be added as a remote to the Gitea sources. Otherwise, changes can\u0026rsquo;t be pushed.\nBuilding Gitea (Basic) Take a look at our instructionsfor building from source.\nThe simplest recommended way to build from source is:\nTAGS=\u0026#34;bindata sqlite sqlite_unlock_notify\u0026#34; make build However, there are a number of additional make tasks you should be aware of. These are documented below but you can look at our Makefile for more, and look at our .drone.yml to see how our continuous integration works.\nFormatting, code analysis and spell check Our continuous integration will reject PRs that are not properly formatted, fail code analysis or spell check.\nYou should format your code with go fmt using:\nmake fmt and can test whether your changes would match the results with:\nmake fmt-check # which runs make fmt internally Note: The results of go fmt are dependent on the version of go present. You should run the same version of go that is on the continuous integration server as mentioned above. make fmt-check will only check if your go would format differently - this may be different from the CI server version.\nYou should run revive, vet and spell-check on the code with:\nmake revive vet misspell-check Working on JS and CSS For simple changes, edit files in web_src, run the build and start the server to test:\nmake build \u0026amp;\u0026amp; ./gitea For more involved changes use the watch-frontend task to continuously rebuild files when their sources change. The bindata tag must be absent to ensure the file system will be used for files in public. First, build and run the backend:\nmake backend \u0026amp;\u0026amp; ./gitea With the backend running, open another terminal and run:\nmake watch-frontend Before committing, make sure the linters pass:\nmake lint-frontend Note: When working on frontend code, it is advisable to set USE_SERVICE_WORKER to false in app.ini which will prevent undesirable caching of frontend assets.\nBuilding Images To build the images, ImageMagick, inkscape and zopflipng binaries must be available in your PATH to run make generate-images.\nUpdating the API When creating new API routes or modifying existing API routes, you MUST update and/or create Swagger documentation for these using go-swagger comments. The structure of these comments is described in the specification. If you want more information about the Swagger structure, you can look at the Swagger 2.0 Documentation or compare with a previous PR adding a new API endpoint, e.g. PR #5483\nYou should be careful not to break the API for downstream users which depend on a stable API. In general, this means additions are acceptable, but deletions or fundamental changes to the API will be rejected.\nOnce you have created or changed an API endpoint, please regenerate the Swagger documentation using:\nmake generate-swagger You should validate your generated Swagger file and spell-check it with:\nmake swagger-validate misspell-check You should commit the changed swagger JSON file. The continous integration server will check that this has been done using:\nmake swagger-check Note: Please note you should use the Swagger 2.0 documentation, not the OpenAPI 3 documentation.\nCreating new configuration options When creating new configuration options, it is not enough to add them to the modules/setting files. You should add information to custom/conf/app.ini and to the configuration cheat sheetfound in docs/content/doc/advanced/config-cheat-sheet.en-us.md\nChanging the logo When changing the Gitea logo SVG, you will need to run and commit the results of:\nmake generate-images This will create the necessary Gitea favicon and others.\nDatabase Migrations If you make breaking changes to any of the database persisted structs in the models/ directory, you will need to make a new migration. These can be found in models/migrations/. You can ensure that your migrations work for the main database types using:\nmake test-sqlite-migration # with sqlite switched for the appropriate database Testing There are two types of test run by Gitea: Unit tests and Integration Tests.\nTAGS=\u0026#34;bindata sqlite sqlite_unlock_notify\u0026#34; make test # Runs the unit tests Unit tests will not and cannot completely test Gitea alone. Therefore, we have written integration tests; however, these are database dependent.\nTAGS=\u0026#34;bindata sqlite sqlite_unlock_notify\u0026#34; make build test-sqlite will run the integration tests in an sqlite environment. Integration tests require git lfs to be installed. Other database tests are available but may need adjustment to the local environment.\nLook at integrations/README.md for more information and how to run a single test.\nOur continuous integration will test the code passes its unit tests and that all supported databases will pass integration test in a Docker environment. Migration from several recent versions of Gitea will also be tested.\nPlease submit your PR with additional tests and integration tests as appropriate.\nDocumentation for the website Documentation for the website is found in docs/. If you change this you can test your changes to ensure that they pass continuous integration using:\n# from the docs directory within Gitea make trans-copy clean build You will require a copy of Hugo to run this task. Please note: this may generate a number of untracked git objects, which will need to be cleaned up.\nVisual Studio Code A launch.json and tasks.json are provided within contrib/ide/vscode for Visual Studio Code. Look at contrib/ide/README.md for more information.\nSubmitting PRs Once you\u0026rsquo;re happy with your changes, push them up and open a pull request. It is recommended that you allow Gitea Managers and Owners to modify your PR branches as we will need to update it to master before merging and/or may be able to help fix issues directly.\nAny PR requires two approvals from the Gitea maintainers and needs to pass the continous integration. Take a look at our CONTRIBUTING.md document.\nIf you need more help pop on to Discord #Develop and chat there.\nThat\u0026rsquo;s it! You are ready to hack on Gitea.\n","permalink":"https://ertlans.github.io/en-us/hacking-on-gitea/","tags":null,"title":"Hacking on Gitea"},{"categories":null,"contents":"","permalink":"https://ertlans.github.io/en-us/installation/","tags":null,"title":"Installation"},{"categories":null,"contents":"Installation from package Debian Although there is a package of Gitea in Debian\u0026rsquo;s contrib, it is not supported directly by us.\nUnfortunately, the package is not maintained anymore and broken because of missing sources. Please follow the deployment from binary guide instead.\nShould the packages get updated and fixed, we will provide up-to-date installation instructions here.\nWindows There are no published packages for Windows. This page will change when packages are published, in the form of MSI installers or via Chocolatey. In the meantime the deployment from binary guide.\nmacOS Currently, the only supported method of installation on MacOS is Homebrew. Following the deployment from binary guide may work, but is not supported. To install Gitea via brew:\nbrew tap go-gitea/gitea brew install gitea FreeBSD A FreeBSD port www/gitea is available. To install the pre-built binary package:\npkg install gitea For the most up to date version, or to build the port with custom options, install it from the port:\nsu - cd /usr/ports/www/gitea make install clean The port uses the standard FreeBSD file system layout: config files are in /usr/local/etc/gitea, bundled templates, options, plugins and themes are in /usr/local/share/gitea, and a start script is in /usr/local/etc/rc.d/gitea.\nTo enable Gitea to run as a service, run sysrc gitea_enable=YES and start it with service gitea start.\nCloudron Gitea is available as a 1-click install on Cloudron. For those unaware, Cloudron makes it easy to run apps like Gitea on your server and keep them up-to-date and secure.\n\nThe Gitea package is maintained here.\nThere is a demo instance (username: cloudron password: cloudron) where you can experiment with running Gitea.\n","permalink":"https://ertlans.github.io/en-us/install-from-package/","tags":null,"title":"Installation from package"},{"categories":null,"contents":"Installation from source You should install go and set up your go environment correctly. In particular, it is recommended to set the $GOPATH environment variable and to add the go bin directory or directories ${GOPATH//://bin:}/bin to the $PATH. See the Go wiki entry for GOPATH.\nNext, install Node.js with npm which is required to build the JavaScript and CSS files. The minimum supported Node.js version is 10 and the latest LTS version is recommended.\nNote: When executing make tasks that require external tools, like make misspell-check, Gitea will automatically download and build these as necessary. To be able to use these, you must have the \u0026quot;$GOPATH/bin\u0026quot; directory on the executable path. If you don\u0026rsquo;t add the go bin directory to the executable path, you will have to manage this yourself.\nNote 2: Go version 1.12 or higher is required. However, it is recommended to obtain the same version as our continuous integration, see the advice given in Hacking on GiteaDownload First, we must retrieve the source code. Since, the advent of go modules, the simplest way of doing this is to use git directly as we no longer have to have gitea built from within the GOPATH.\ngit clone https://github.com/go-gitea/gitea (Previous versions of this document recommended using go get. This is no longer necessary.)\nDecide which version of Gitea to build and install. Currently, there are multiple options to choose from. The master branch represents the current development version. To build with master, skip to the build section.\nTo work with tagged releases, the following commands can be used:\ngit branch -a git checkout v1.11.4 To validate a Pull Request, first enable the new branch (xyz is the PR id; for example 2663 for #2663):\ngit fetch origin pull/xyz/head:pr-xyz To build Gitea from source at a specific tagged release (like v1.11.4), list the available tags and check out the specific tag.\nList available tags with the following.\ngit tag -l git checkout v1.11.4 # or git checkout pr-xyz Build To build from source, the following programs must be present on the system:\n go 1.12 or higher, see here node 10 or higher with npm, see here make, see here  Various make tasks are provided to keep the build process as simple as possible.\nDepending on requirements, the following build tags can be included.\n bindata: Build a single monolithic binary, with all assets included. sqlite sqlite_unlock_notify: Enable support for a SQLite3 database. Suggested only for tiny installations. pam: Enable support for PAM (Linux Pluggable Authentication Modules). Can be used to authenticate local users or extend authentication to methods available to PAM.  Bundling assets into the binary using the bindata build tag can make development and testing easier, but is not ideal for a production deployment. To include assets, add the bindata tag:\nTAGS=\u0026#34;bindata\u0026#34; make build In the default release build of our continuous integration system, the build tags are: TAGS=\u0026quot;bindata sqlite sqlite_unlock_notify\u0026quot;. The simplest recommended way to build from source is therefore:\nTAGS=\u0026#34;bindata sqlite sqlite_unlock_notify\u0026#34; make build The build target is split into two sub-targets:\n make backend which requires Go 1.12  or greater. make frontend which requires Node.js 10  or greater.  If pre-built frontend files are present it is possible to only build the backend:\nTAGS=\u0026#34;bindata\u0026#34; make backend Test After following the steps above, a gitea binary will be available in the working directory. It can be tested from this directory or moved to a directory with test data. When Gitea is launched manually from command line, it can be killed by pressing Ctrl + C.\n./gitea web Changing the default CustomPath, CustomConf and AppWorkPath Gitea will search for a number of things from the CustomPath. By default this is the custom/ directory in the current working directory when running Gitea. It will also look for its configuration file CustomConf in $CustomPath/conf/app.ini, and will use the current working directory as the relative base path AppWorkPath for a number configurable values.\nThese values, although useful when developing, may conflict with downstream users preferences.\nOne option is to use a script file to shadow the gitea binary and create an appropriate environment before running Gitea. However, when building you can change these defaults using the LDFLAGS environment variable for make. The appropriate settings are as follows\n To set the CustomPath use LDFLAGS=\u0026quot;-X \\\u0026quot;code.gitea.io/gitea/modules/setting.CustomPath=custom-path\\\u0026quot;\u0026quot; For CustomConf you should use -X \\\u0026quot;code.gitea.io/gitea/modules/setting.CustomConf=conf.ini\\\u0026quot; For AppWorkPath you should use -X \\\u0026quot;code.gitea.io/gitea/modules/setting.AppWorkPath=working-path\\\u0026quot;  Add as many of the strings with their preceding -X to the LDFLAGS variable and run make build with the appropriate TAGS as above.\nRunning gitea help will allow you to review what the computed settings will be for your gitea.\nCross Build The go compiler toolchain supports cross-compiling to different architecture targets that are supported by the toolchain. See GOOS and GOARCH environment variable for the list of supported targets. Cross compilation is helpful if you want to build Gitea for less-powerful systems (such as Raspberry Pi).\nTo cross build Gitea with build tags (TAGS), you also need a C cross compiler which targets the same architecture as selected by the GOOS and GOARCH variables. For example, to cross build for Linux ARM64 (GOOS=linux and GOARCH=arm64), you need the aarch64-unknown-linux-gnu-gcc cross compiler. This is required because Gitea build tags uses cgo's foreign-function interface (FFI).\nCross-build Gitea for Linux ARM64, without any tags:\nGOOS=linux GOARCH=arm64 make build Cross-build Gitea for Linux ARM64, with recommended build tags:\nCC=aarch64-unknown-linux-gnu-gcc GOOS=linux GOARCH=arm64 TAGS=\u0026quot;bindata sqlite sqlite_unlock_notify\u0026quot; make build Replace CC, GOOS, and GOARCH as appropriate for your architecture target.\n","permalink":"https://ertlans.github.io/en-us/install-from-source/","tags":null,"title":"Installation from source"},{"categories":null,"contents":"Installation with Docker Gitea provides automatically updated Docker images within its Docker Hub organization. It is possible to always use the latest stable tag or to use another service that handles updating Docker images.\nThis reference setup guides users through the setup based on docker-compose, but the installation of docker-compose is out of scope of this documentation. To install docker-compose itself, follow the official install instructions.\nBasics The most simple setup just creates a volume and a network and starts the gitea/gitea:latest image as a service. Since there is no database available, one can be initialized using SQLite3. Create a directory like gitea and paste the following content into a file named docker-compose.yml. Note that the volume should be owned by the user/group with the UID/GID specified in the config file. If you don\u0026rsquo;t give the volume correct permissions, the container may not start. Also be aware that the tag :latest will install the current development version. For a stable release you can use :1 or specify a certain release like :1.11.4.\nversion: \u0026#34;2\u0026#34; networks: gitea: external: false services: server: image: gitea/gitea:latest environment: - USER_UID=1000 - USER_GID=1000 restart: always networks: - gitea volumes: - ./gitea:/data - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026#34;3000:3000\u0026#34; - \u0026#34;222:22\u0026#34; Custom port To bind the integrated openSSH daemon and the webserver on a different port, adjust the port section. It\u0026rsquo;s common to just change the host port and keep the ports within the container like they are.\nversion: \u0026#34;2\u0026#34; networks: gitea: external: false services: server: image: gitea/gitea:latest environment: - USER_UID=1000 - USER_GID=1000 restart: always networks: - gitea volumes: - ./gitea:/data - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - - \u0026#34;3000:3000\u0026#34; - - \u0026#34;222:22\u0026#34; + - \u0026#34;8080:3000\u0026#34; + - \u0026#34;2221:22\u0026#34; MySQL database To start Gitea in combination with a MySQL database, apply these changes to the docker-compose.yml file created above.\nversion: \u0026#34;2\u0026#34; networks: gitea: external: false services: server: image: gitea/gitea:latest environment: - USER_UID=1000 - USER_GID=1000 + - DB_TYPE=mysql + - DB_HOST=db:3306 + - DB_NAME=gitea + - DB_USER=gitea + - DB_PASSWD=gitea  restart: always networks: - gitea volumes: - ./gitea:/data - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026#34;3000:3000\u0026#34; - \u0026#34;222:22\u0026#34; + depends_on: + - db + + db: + image: mysql:5.7 + restart: always + environment: + - MYSQL_ROOT_PASSWORD=gitea + - MYSQL_USER=gitea + - MYSQL_PASSWORD=gitea + - MYSQL_DATABASE=gitea + networks: + - gitea + volumes: + - ./mysql:/var/lib/mysql PostgreSQL database To start Gitea in combination with a PostgreSQL database, apply these changes to the docker-compose.yml file created above.\nversion: \u0026#34;2\u0026#34; networks: gitea: external: false services: server: image: gitea/gitea:latest environment: - USER_UID=1000 - USER_GID=1000 + - DB_TYPE=postgres + - DB_HOST=db:5432 + - DB_NAME=gitea + - DB_USER=gitea + - DB_PASSWD=gitea  restart: always networks: - gitea volumes: - ./gitea:/data - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026#34;3000:3000\u0026#34; - \u0026#34;222:22\u0026#34; + depends_on: + - db + + db: + image: postgres:9.6 + restart: always + environment: + - POSTGRES_USER=gitea + - POSTGRES_PASSWORD=gitea + - POSTGRES_DB=gitea + networks: + - gitea + volumes: + - ./postgres:/var/lib/postgresql/data Named volumes To use named volumes instead of host volumes, define and use the named volume within the docker-compose.yml configuration. This change will automatically create the required volume. You don\u0026rsquo;t need to worry about permissions with named volumes; Docker will deal with that automatically.\nversion: \u0026#34;2\u0026#34; networks: gitea: external: false +volumes: + gitea: + driver: local + services: server: image: gitea/gitea:latest restart: always networks: - gitea volumes: - - ./gitea:/data + - gitea:/data  - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026#34;3000:3000\u0026#34; - \u0026#34;222:22\u0026#34; MySQL or PostgreSQL containers will need to be created separately.\nStart To start this setup based on docker-compose, execute docker-compose up -d, to launch Gitea in the background. Using docker-compose ps will show if Gitea started properly. Logs can be viewed with docker-compose logs.\nTo shut down the setup, execute docker-compose down. This will stop and kill the containers. The volumes will still exist.\nNotice: if using a non-3000 port on http, change app.ini to match LOCAL_ROOT_URL = http://localhost:3000/.\nInstall After starting the Docker setup via docker-compose, Gitea should be available using a favorite browser to finalize the installation. Visit http://server-ip:3000 and follow the installation wizard. If the database was started with the docker-compose setup as documented above, please note that db must be used as the database hostname.\nEnvironments variables You can configure some of Gitea\u0026rsquo;s settings via environment variables:\n(Default values are provided in bold)\n APP_NAME: \u0026ldquo;Gitea: Git with a cup of tea\u0026rdquo;: Application name, used in the page title. RUN_MODE: dev: For performance and other purposes, change this to prod when deployed to a production environment. SSH_DOMAIN: localhost: Domain name of this server, used for the displayed clone URL in Gitea\u0026rsquo;s UI. SSH_PORT: 22: SSH port displayed in clone URL. SSH_LISTEN_PORT: %(SSH_PORT)s: Port for the built-in SSH server. DISABLE_SSH: false: Disable SSH feature when it\u0026rsquo;s not available. HTTP_PORT: 3000: HTTP listen port. ROOT_URL: \u0026quot;\u0026quot;: Overwrite the automatically generated public URL. This is useful if the internal and the external URL don\u0026rsquo;t match (e.g. in Docker). LFS_START_SERVER: false: Enables git-lfs support. DB_TYPE: sqlite3: The database type in use [mysql, postgres, mssql, sqlite3]. DB_HOST: localhost:3306: Database host address and port. DB_NAME: gitea: Database name. DB_USER: root: Database username. DB_PASSWD: \u0026quot;\u0026lt;empty\u0026gt;\u0026rdquo;: Database user password. Use `your password` for quoting if you use special characters in the password. INSTALL_LOCK: false: Disallow access to the install page. SECRET_KEY: \u0026quot;\u0026quot;: Global secret key. This should be changed. If this has a value and INSTALL_LOCK is empty, INSTALL_LOCK will automatically set to true. DISABLE_REGISTRATION: false: Disable registration, after which only admin can create accounts for users. REQUIRE_SIGNIN_VIEW: false: Enable this to force users to log in to view any page. USER_UID: 1000: The UID (Unix user ID) of the user that runs Gitea within the container. Match this to the UID of the owner of the /data volume if using host volumes (this is not necessary with named volumes). USER_GID: 1000: The GID (Unix group ID) of the user that runs Gitea within the container. Match this to the GID of the owner of the /data volume if using host volumes (this is not necessary with named volumes).  Customization Customization files described here should be placed in /data/gitea directory. If using host volumes, it\u0026rsquo;s quite easy to access these files; for named volumes, this is done through another container or by direct access at /var/lib/docker/volumes/gitea_gitea/_data. The configuration file will be saved at /data/gitea/conf/app.ini after the installation.\nUpgrading ❗❗ Make sure you have volumed data to somewhere outside Docker container ❗❗\nTo upgrade your installation to the latest release:\n# Edit `docker-compose.yml` to update the version, if you have one specified # Pull new images docker-compose pull # Start a new container, automatically removes old one docker-compose up -d SSH Container Passthrough Since SSH is running inside the container, you\u0026rsquo;ll have to pass SSH from the host to the container if you wish to use SSH support. If you wish to do this without running the container SSH on a non-standard port (or move your host port to a non-standard port), you can forward SSH connections destined for the container with a little extra setup.\nThis guide assumes that you have created a user on the host called git which shares the same UID/GID as the container values USER_UID/USER_GID. You should also create the directory /var/lib/gitea on the host, owned by the git user and mounted in the container, e.g.\n services: server: image: gitea/gitea:latest environment: - USER_UID=1000 - USER_GID=1000 restart: always networks: - gitea volumes: - /var/lib/gitea:/data - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026quot;3000:3000\u0026quot; - \u0026quot;127.0.0.1:2222:22\u0026quot; You can see that we\u0026rsquo;re also exposing the container SSH port to port 2222 on the host, and binding this to 127.0.0.1 to prevent it being accessible external to the host machine itself.\nOn the host, you should create the file /app/gitea/gitea with the following contents and make it executable (chmod +x /app/gitea/gitea):\n#!/bin/sh ssh -p 2222 -o StrictHostKeyChecking=no git@127.0.0.1 \u0026quot;SSH_ORIGINAL_COMMAND=\\\u0026quot;$SSH_ORIGINAL_COMMAND\\\u0026quot; $0 $@\u0026quot; Your git user needs to have an SSH key generated:\nsudo -u git ssh-keygen -t rsa -b 4096 -C \u0026quot;Gitea Host Key\u0026quot; Still on the host, symlink the container .ssh/authorized_keys file to your git user .ssh/authorized_keys. This can be done on the host as the /var/lib/gitea directory is mounted inside the container under /data:\nln -s /var/lib/gitea/git/.ssh/authorized_keys /home/git/.ssh/authorized_keys Then echo the git user SSH key into the authorized_keys file so the host can talk to the container over SSH:\necho \u0026quot;no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty $(cat /home/git/.ssh/id_rsa.pub)\u0026quot; \u0026gt;\u0026gt; /var/lib/gitea/git/.ssh/authorized_keys Now you should be able to use Git over SSH to your container without disrupting SSH access to the host.\nPlease note: SSH container passthrough will work only if using opensshd in container, and will not work if AuthorizedKeysCommand is used in combination with setting SSH_CREATE_AUTHORIZED_KEYS_FILE=false to disable authorized files key generation.\n","permalink":"https://ertlans.github.io/en-us/install-with-docker/","tags":null,"title":"Installation with Docker"},{"categories":null,"contents":"Localization TBD ","permalink":"https://ertlans.github.io/en-us/localization/","tags":null,"title":"Localization"},{"categories":null,"contents":"","permalink":"https://ertlans.github.io/en-us/upgrade/","tags":null,"title":"Upgrade"},{"categories":null,"contents":"Upgrade from Gogs Gogs, version 0.9.146 and older, can be easily migrated to Gitea.\nThere are some basic steps to follow. On a Linux system run as the Gogs user:\n Create a Gogs backup with gogs backup. This creates gogs-backup-[timestamp].zip file containing all important Gogs data. You would need it if you wanted to move to the gogs back later. Download the file matching the destination platform from the downloads page. It should be 1.0.x version. Migrating from gogs to any other version is impossible. Put the binary at the desired install location. Copy gogs/custom/conf/app.ini to gitea/custom/conf/app.ini. Copy custom templates, public from gogs/custom/ to gitea/custom/. For any other custom folders, such as gitignore, label, license, locale, readme in gogs/custom/conf, copy them to gitea/custom/options. Copy gogs/data/ to gitea/data/. It contains issue attachments and avatars. Verify by starting Gitea with gitea web. Enter Gitea admin panel on the UI, run Rewrite '.ssh/authorized_keys' file. Launch every major version of the binary ( 1.1.4 → 1.2.3 → 1.3.4 → 1.4.2 → etc ) to migrate database. If custom or config path was changed, run Rewrite all update hook of repositories.  Change gogs specific information   Rename gogs-repositories/ to gitea-repositories/\n  Rename gogs-data/ to gitea-data/\n  In gitea/custom/conf/app.ini change:\nFROM:\n[database] PATH = /home/:USER/gogs/data/:DATABASE.db [attachment] PATH = /home/:USER/gogs-data/attachments [picture] AVATAR_UPLOAD_PATH = /home/:USER/gogs-data/avatars [log] ROOT_PATH = /home/:USER/gogs/log TO:\n[database] PATH = /home/:USER/gitea/data/:DATABASE.db [attachment] PATH = /home/:USER/gitea-data/attachments [picture] AVATAR_UPLOAD_PATH = /home/:USER/gitea-data/avatars [log] ROOT_PATH = /home/:USER/gitea/log   Verify by starting Gitea with gitea web\n  Upgrading to most recent gitea version After successful migration from gogs to gitea 1.0.x, it is possible to upgrade gitea to a modern version in a two steps process.\nUpgrade to gitea 1.6.4 first. Download the file matching the destination platform from the downloads page and replace the binary. Run Gitea at least once and check that everything works as expected.\nThen repeat the procedure, but this time using the lastest release.\nUpgrading from a more recent version of Gogs Upgrading from a more recent version of Gogs is also possible, but requires a bit more work. See #4286.\nTroubleshooting  If errors are encountered relating to custom templates in the gitea/custom/templates folder, try moving the templates causing the errors away one by one. They may not be compatible with Gitea or an update.  Add Gitea to startup on Unix Update the appropriate file from gitea/contrib with the right environment variables.\nFor distros with systemd:\n Copy the updated script to /etc/systemd/system/gitea.service Add the service to the startup with: sudo systemctl enable gitea Disable old gogs startup script: sudo systemctl disable gogs  For distros with SysVinit:\n Copy the updated script to /etc/init.d/gitea Add the service to the startup with: sudo rc-update add gitea Disable old gogs startup script: sudo rc-update del gogs  ","permalink":"https://ertlans.github.io/en-us/upgrade-from-gogs/","tags":null,"title":"Upgrade from Gogs"},{"categories":null,"contents":"Webhooks Gitea supports web hooks for repository events. This can be configured in the settings page /:username/:reponame/settings/hooks by a repository admin. Webhooks can also be configured on a per-organization and whole system basis. All event pushes are POST requests. The methods currently supported are:\n Gitea (can also be a GET request) Gogs Slack Discord Dingtalk Telegram Microsoft Teams Feishu  Event information The following is an example of event information that will be sent by Gitea to a Payload URL:\nX-GitHub-Delivery: f6266f16-1bf3-46a5-9ea4-602e06ead473 X-GitHub-Event: push X-Gogs-Delivery: f6266f16-1bf3-46a5-9ea4-602e06ead473 X-Gogs-Event: push X-Gitea-Delivery: f6266f16-1bf3-46a5-9ea4-602e06ead473 X-Gitea-Event: push { \u0026#34;secret\u0026#34;: \u0026#34;3gEsCfjlV2ugRwgpU#w1*WaW*wa4NXgGmpCfkbG3\u0026#34;, \u0026#34;ref\u0026#34;: \u0026#34;refs/heads/develop\u0026#34;, \u0026#34;before\u0026#34;: \u0026#34;28e1879d029cb852e4844d9c718537df08844e03\u0026#34;, \u0026#34;after\u0026#34;: \u0026#34;bffeb74224043ba2feb48d137756c8a9331c449a\u0026#34;, \u0026#34;compare_url\u0026#34;: \u0026#34;http://localhost:3000/gitea/webhooks/compare/28e1879d029cb852e4844d9c718537df08844e03...bffeb74224043ba2feb48d137756c8a9331c449a\u0026#34;, \u0026#34;commits\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;bffeb74224043ba2feb48d137756c8a9331c449a\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Webhooks Yay!\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:3000/gitea/webhooks/commit/bffeb74224043ba2feb48d137756c8a9331c449a\u0026#34;, \u0026#34;author\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Gitea\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;someone@gitea.io\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;gitea\u0026#34; }, \u0026#34;committer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Gitea\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;someone@gitea.io\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;gitea\u0026#34; }, \u0026#34;timestamp\u0026#34;: \u0026#34;2017-03-13T13:52:11-04:00\u0026#34; } ], \u0026#34;repository\u0026#34;: { \u0026#34;id\u0026#34;: 140, \u0026#34;owner\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;login\u0026#34;: \u0026#34;gitea\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;Gitea\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;someone@gitea.io\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://localhost:3000/avatars/1\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;gitea\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;webhooks\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;gitea/webhooks\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;private\u0026#34;: false, \u0026#34;fork\u0026#34;: false, \u0026#34;html_url\u0026#34;: \u0026#34;http://localhost:3000/gitea/webhooks\u0026#34;, \u0026#34;ssh_url\u0026#34;: \u0026#34;ssh://gitea@localhost:2222/gitea/webhooks.git\u0026#34;, \u0026#34;clone_url\u0026#34;: \u0026#34;http://localhost:3000/gitea/webhooks.git\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;stars_count\u0026#34;: 0, \u0026#34;forks_count\u0026#34;: 1, \u0026#34;watchers_count\u0026#34;: 1, \u0026#34;open_issues_count\u0026#34;: 7, \u0026#34;default_branch\u0026#34;: \u0026#34;master\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2017-02-26T04:29:06-05:00\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2017-03-13T13:51:58-04:00\u0026#34; }, \u0026#34;pusher\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;login\u0026#34;: \u0026#34;gitea\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;Gitea\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;someone@gitea.io\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://localhost:3000/avatars/1\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;gitea\u0026#34; }, \u0026#34;sender\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;login\u0026#34;: \u0026#34;gitea\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;Gitea\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;someone@gitea.io\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://localhost:3000/avatars/1\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;gitea\u0026#34; } } Example This is an example of how to use webhooks to run a php script upon push requests to the repository. In your repository Settings, under Webhooks, Setup a Gitea webhook as follows:\n Target URL: http://mydomain.com/webhook.php HTTP Method: POST POST Content Type: application/json Secret: 123 Trigger On: Push Events Active: Checked  Now on your server create the php file webhook.php\n\u0026lt;?php $secret_key = '123'; // check for POST request if ($_SERVER['REQUEST_METHOD'] != 'POST') { error_log('FAILED - not POST - '. $_SERVER['REQUEST_METHOD']); exit(); } // get content type $content_type = isset($_SERVER['CONTENT_TYPE']) ? strtolower(trim($_SERVER['CONTENT_TYPE'])) : ''; if ($content_type != 'application/json') { error_log('FAILED - not application/json - '. $content_type); exit(); } // get payload $payload = trim(file_get_contents(\u0026quot;php://input\u0026quot;)); if (empty($payload)) { error_log('FAILED - no payload'); exit(); } // get header signature $header_signature = isset($_SERVER['HTTP_X_GITEA_SIGNATURE']) ? $_SERVER['HTTP_X_GITEA_SIGNATURE'] : ''; if (empty($header_signature)) { error_log('FAILED - header signature missing'); exit(); } // calculate payload signature $payload_signature = hash_hmac('sha256', $payload, $secret_key, false); // check payload signature against header signature if ($header_signature != $payload_signature) { error_log('FAILED - payload signature'); exit(); } // convert json to array $decoded = json_decode($payload, true); // check for json decode errors if (json_last_error() !== JSON_ERROR_NONE) { error_log('FAILED - json decode - '. json_last_error()); exit(); } // success, do something There is a Test Delivery button in the webhook settings that allows to test the configuration as well as a list of the most Recent Deliveries.\n","permalink":"https://ertlans.github.io/en-us/webhooks/","tags":null,"title":"Webhooks"},{"categories":null,"contents":"What is Gitea - testing? Gitea is a painless self-hosted Git service. It is similar to GitHub, Bitbucket, and GitLab. Gitea is a fork of Gogs. See the Gitea Announcement blog post to read about the justification for a fork.\nPurpose The goal of this project is to provide the easiest, fastest, and most painless way of setting up a self-hosted Git service. With Go, this can be done with an independent binary distribution across all platforms and architectures that Go supports. This support includes Linux, macOS, and Windows, on architectures like amd64, i386, ARM, PowerPC, and others.\nFeatures  User Dashboard  Context switcher (organization or current user) Activity timeline  Commits Issues Pull requests Repository creation   Searchable repository list List of organizations A list of mirror repositories   Issues dashboard  Context switcher (organization or current user) Filter by  Open Closed Your repositories Assigned issues Your issues Repository   Sort by  Oldest Last updated Number of comments     Pull request dashboard  Same as issue dashboard   Repository types  Mirror Normal Migrated   Notifications (email and web)  Read Unread Pin   Explore page  Users Repos Organizations Search   Custom templates Override public files (logo, css, etc) CSRF and XSS protection HTTPS support Set allowed upload sizes and types Logging Configuration  Databases  MySQL PostgreSQL SQLite3 MSSQL TiDB (experimental, not recommended)   Configuration file  app.ini   Admin panel  Statistics Actions  Delete inactive accounts Delete cached repository archives Delete repositories records which are missing their files Run garbage collection on repositories Rewrite SSH keys Resync hooks Recreate repositories which are missing   Server status  Uptime Memory Current # of goroutines And more   User management  Search Sort Last login Authentication source Maximum repositories Disable account Admin permissions Permission to create git hooks Permission to create organizations Permission to import repositories   Organization management  People Teams Avatar Hooks   Repository management  See all repository information and manage repositories   Authentication sources  OAuth PAM LDAP SMTP   Configuration viewer  Everything in config file   System notices  When somthing unexpected happens   Monitoring  Current processes Cron jobs  Update mirrors Repository health check Check repository statistics Clean up old archives       Environment variables Command line options   Multi-language support (21 languages) Mail service  Notifications Registration confirmation Password reset   Reverse proxy support  Includes subpaths   Users  Profile  Name Username Email Website Join date Followers and following Organizations Repositories Activity Starred repositories   Settings  Same as profile and more below Keep email private Avatar  Gravatar Libravatar Custom   Password Mutiple email addresses SSH Keys Connected applications Two factor authentication Linked OAuth2 sources Delete account     Repositories  Clone with SSH/HTTP/HTTPS Git LFS Watch, Star, Fork View watchers, stars, and forks Code  Branch browser Web based file upload and creation Clone urls Download  ZIP TAR.GZ   Web based editor  Markdown editor Plain text editor  Syntax highlighting   Diff preview Preview Choose where to commit to   View file history Delete file View raw   Issues  Issue templates Milestones Labels Assign issues Track time Reactions Filter  Open Closed Assigned person Created by you Mentioning you   Sort  Oldest Last updated Number of comments   Search Comments Attachments   Pull requests  Same features as issues   Commits  Commit graph Commits by branch Search Search in all branches View diff View SHA View author Browse files in commit   Releases  Attachments Title Content Delete Mark as pre-release Choose branch   Wiki  Import Markdown editor   Settings  Options  Name Description Private/Public Website Wiki  Enabled/disabled Internal/external   Issues  Enabled/disabled Internal/external External supports url rewriting for better integration   Enable/disable pull requests Transfer repository Delete wiki Delete repository   Collaboration  Read/write/admin   Branches  Default branch Branch protection   Webhooks Git hooks Deploy keys      System Requirements  A Raspberry Pi 3 is powerful enough to run Gitea for small workloads. 2 CPU cores and 1GB RAM is typically sufficient for small teams/projects. Gitea should be run with a dedicated non-root system account on UNIX-type systems.  Note: Gitea manages the ~/.ssh/authorized_keys file. Running Gitea as a regular user could break that user\u0026rsquo;s ability to log in.   Git version 1.7.2 or later is required. Version 1.9.0 or later is recommended. Also please note:  Git large file storage will be available if enabled when git \u0026gt;= 2.1.2. Git commit-graph rendering will be enabled automatically when git \u0026gt;= 2.18.    Browser Support  Please see Semantic UI for specific versions of supported browsers.  Components  Web framework: Macaron ORM: XORM UI components:  Semantic UI GitHub Octicons Font Awesome DropzoneJS Highlight Clipboard CodeMirror jQuery Date Time Picker jQuery MiniColors   Database drivers:  github.com/go-sql-driver/mysql github.com/lib/pq github.com/mattn/go-sqlite3 github.com/pingcap/tidb github.com/denisenkom/go-mssqldb    Software and Service Support  Drone (CI)  ","permalink":"https://ertlans.github.io/en-us/","tags":null,"title":"Documentation"},{"categories":null,"contents":"Backup and Restore Gitea currently has a dump command that will save the installation to a zip file. This file can be unpacked and used to restore an instance.\nBackup Command (dump) Switch to the user running Gitea: su git. Run ./gitea dump -c /path/to/app.ini in the Gitea installation directory. There should be some output similar to the following:\n2016/12/27 22:32:09 Creating tmp work dir: /tmp/gitea-dump-417443001 2016/12/27 22:32:09 Dumping local repositories.../home/git/gitea-repositories 2016/12/27 22:32:22 Dumping database... 2016/12/27 22:32:22 Packing dump files... 2016/12/27 22:32:34 Removing tmp work dir: /tmp/gitea-dump-417443001 2016/12/27 22:32:34 Finish dumping in file gitea-dump-1482906742.zip Inside the gitea-dump-1482906742.zip file, will be the following:\n app.ini - Optional copy of configuration file if originally stored outside of the default custom/ directory custom - All config or customization files in custom/. data - Data directory in \u0026lt;GITEA_WORK_DIR\u0026gt;, except sessions if you are using file session. This directory includes attachments, avatars, lfs, indexers, sqlite file if you are using sqlite. gitea-db.sql - SQL dump of database gitea-repo.zip - Complete copy of the repository directory. log/ - Various logs. They are not needed for a recovery or migration.  Intermediate backup files are created in a temporary directory specified either with the --tempdir command-line parameter or the TMPDIR environment variable.\nUsing Docker (dump) There are a few caveats for using the dump command with Docker.\nThe command has to be executed with the RUN_USER = \u0026lt;OS_USERNAME\u0026gt; specified in gitea/conf/app.ini; and, for the zipping of the backup folder to occur without permission error the command docker exec must be executed inside of the --tempdir.\nExample:\ndocker exec -u \u0026lt;OS_USERNAME\u0026gt; -it -w \u0026lt;--tempdir\u0026gt; $(docker ps -qf \u0026quot;name=\u0026lt;NAME_OF_DOCKER_CONTAINER\u0026gt;\u0026quot;) bash -c '/app/gitea/gitea dump -c \u0026lt;/path/to/app.ini\u0026gt;' *Note: --tempdir refers to the temporary directory of the docker environment used by Gitea; if you have not specified a custom --tempdir, then Gitea uses /tmp or the TMPDIR environment variable of the docker container. For --tempdir adjust your docker exec command options accordingly.\nThe result should be a file, stored in the --tempdir specified, along the lines of: gitea-dump-1482906742.zip\nRestore Command (restore) There is currently no support for a recovery command. It is a manual process that mostly involves moving files to their correct locations and restoring a database dump.\nExample:\napt-get install gitea unzip gitea-dump-1482906742.zip cd gitea-dump-1482906742 mv custom/conf/app.ini /etc/gitea/conf/app.ini # or mv app.ini /etc/gitea/conf/app.ini unzip gitea-repo.zip mv gitea-repo/* /var/lib/gitea/repositories/ chown -R gitea:gitea /etc/gitea/conf/app.ini /var/lib/gitea/repositories/ mysql --default-character-set=utf8mb4 -u$USER -p$PASS $DATABASE \u0026lt;gitea-db.sql # or sqlite3 $DATABASE_PATH \u0026lt;gitea-db.sql service gitea restart Repository git-hooks should be regenerated if installation method is changed (eg. binary -\u0026gt; Docker), or if Gitea is installed to a different directory than the previous installation.\nWith Gitea running, and from the directory Gitea\u0026rsquo;s binary is located, execute: ./gitea admin regenerate hooks\nThis ensures that application and configuration file paths in repository git-hooks are consistent and applicable to the current installation. If these paths are not updated, repository push actions will fail.\n","permalink":"https://ertlans.github.io/en-us/backup-and-restore/","tags":null,"title":"Usage: Backup and Restore"},{"categories":null,"contents":"Email setup To use Gitea\u0026rsquo;s built-in Email support, update the app.ini config file [mailer] section:\nSendmail version Use the operating system’s sendmail command instead of SMTP. This is common on Linux servers.\nNote: For use in the official Gitea Docker image, please configure with the SMTP version.\n[mailer] ENABLED = true FROM = gitea@mydomain.com MAILER_TYPE = sendmail SENDMAIL_PATH = /usr/sbin/sendmail SMTP version [mailer] ENABLED = true FROM = gitea@mydomain.com MAILER_TYPE = smtp HOST = mail.mydomain.com:587 IS_TLS_ENABLED = true USER = gitea@mydomain.com PASSWD = `password`   Restart Gitea for the configuration changes to take effect.\n  To send a test email to validate the settings, go to Gitea \u0026gt; Site Administration \u0026gt; Configuration \u0026gt; SMTP Mailer Configuration.\n  For the full list of options check the Config Cheat Sheet\nGmail The following configuration should work with GMail\u0026rsquo;s SMTP server:\n[mailer] ENABLED = true HOST = smtp.gmail.com:465 FROM = example@gmail.com USER = example@gmail.com PASSWD = *** MAILER_TYPE = smtp IS_TLS_ENABLED = true HELO_HOSTNAME = example.com ","permalink":"https://ertlans.github.io/en-us/email-setup/","tags":null,"title":"Usage: Email setup"},{"categories":null,"contents":"Pull Request \u0026ldquo;Work In Progress\u0026rdquo; pull requests Marking a pull request as being a work in progress will prevent that pull request from being accidentally merged. To mark a pull request as being a work in progress, you must prefix its title by WIP: or [WIP] (case insensitive). Those values are configurable in your app.ini file :\n[repository.pull-request] WORK_IN_PROGRESS_PREFIXES=WIP:,[WIP] The first value of the list will be used in helpers.\nPull Request Templates You can find more information about pull request templates at the page Issue and Pull Request templates.\n","permalink":"https://ertlans.github.io/en-us/pull-request/","tags":null,"title":"Usage: Pull Request"},{"categories":null,"contents":"Automatically Linked References in Issues, Pull Requests and Commit Messages When an issue, pull request or comment is posted, the text description is parsed in search for references. These references will be shown as links in the Issue View and, in some cases, produce certain actions.\nLikewise, commit messages are parsed when they are listed, and actions are can be triggered when they are pushed to the main branch.\nTo prevent the creation of unintended references, there are certain rules for them to be recognized. For example, they should not be included inside code text. They should also be reasonably cleared from their surrounding text (for example, using spaces).\nUser, Team and Organization Mentions When a text in the form @username is found and username matches the name of an existing user, a mention reference is created. This will be shown by changing the text into a link to said user\u0026rsquo;s profile, and possibly create a notification for the mentioned user depending on whether they have the necessary permission to access the contents.\nExample:\n @John, can you give this a look?\n This is also valid for teams and organizations:\n @Documenters, we need to plan for this.\n  @CoolCompanyInc, this issue concerns us all!\n Teams will receive mail notifications when appropriate, but whole organizations won\u0026rsquo;t.\nCommit messages do not produce user notifications.\nCommits Commits can be referenced using their SHA1 hash, or a portion of it of at least seven characters. They will be shown as a link to the corresponding commit.\nExample:\n This bug was introduced in e59ff077\n Issues and Pull Requests A reference to another issue or pull request can be created using the simple notation #1234, where 1234 is the number of an issue or pull request in the same repository. These references will be shown as links to the referenced content.\nThe effect of creating this type of reference is that a notice will be created in the referenced document, provided the creator of the reference has reading permissions on it.\nExample:\n This seems related to #1234\n Issues and pull requests in other repositories can be referred to as well using the form owner/repository#1234:\n This seems related to mike/compiler#1234\n Alternatively, the !1234 notation can be used as well. Even when in Gitea a pull request is a form of issue, the #1234 form will always link to an issue; if the linked entry happens to be a pull request instead, Gitea will redirect as appropriate. With the !1234 notation, a pull request link will be created, which will be redirected to an issue if required. However, this distinction could be important if an external tracker is used, where links to issues and pull requests are not interchangeable.\nActionable References in Pull Requests and Commit Messages Sometimes a commit or pull request may fix or bring back a problem documented in a particular issue. Gitea supports closing and reopening the referenced issues by preceding the reference with a particular keyword. Common keywords include \u0026ldquo;closes\u0026rdquo;, \u0026ldquo;fixes\u0026rdquo;, \u0026ldquo;reopens\u0026rdquo;, etc. This list can be customized by the site administrator.\nExample:\n This PR closes #1234\n If the actionable reference is accepted, this will create a notice on the referenced issue announcing that it will be closed when the referencing PR is merged.\nFor an actionable reference to be accepted, at least one of the following conditions must be met:\n The commenter has permissions to close or reopen the issue at the moment of creating the reference. The reference is inside a commit message. The reference is posted as part of the pull request description.  In the last case, the issue will be closed or reopened only if the merger of the pull request has permissions to do so.\nAdditionally, only pull requests and commit messages can create an action, and only issues can be closed or reopened this way.\nThe default keywords are:\n Closing: close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved Reopening: reopen, reopens, reopened  External Trackers Gitea supports the use of external issue trackers, and references to issues hosted externally can be created in pull requests. However, if the external tracker uses numbers to identify issues, they will be indistinguishable from the pull requests hosted in Gitea. To address this, Gitea allows the use of the ! marker to identify pull requests. For example:\n This is issue #1234, and links to the external tracker.\n  This is pull request !1234, and links to a pull request in Gitea.\n The ! and # can be used interchangeably for issues and pull request except for this case, where a distinction is required. If the repository uses external tracker, commit message for squash merge will use ! as reference by default.\nIssues and Pull Requests References Summary This table illustrates the different kinds of cross-reference for issues and pull requests. In the examples, User1/Repo1 refers to the repository where the reference is used, while UserZ/RepoZ indicates a different repository.\n   Reference in User1/Repo1 Repo1 issues are external RepoZ issues are external Should render     #1234 no N/A A link to issue/pull 1234 in User1/Repo1   !1234 no N/A A link to issue/pull 1234 in User1/Repo1   #1234 yes N/A A link to external issue 1234 for User1/Repo1   !1234 yes N/A A link to PR 1234 for User1/Repo1   User1/Repo1#1234 no N/A A link to issue/pull 1234 in User1/Repo1   User1/Repo1!1234 no N/A A link to issue/pull 1234 in User1/Repo1   User1/Repo1#1234 yes N/A A link to external issue 1234 for User1/Repo1   User1/Repo1!1234 yes N/A A link to PR 1234 for User1/Repo1   UserZ/RepoZ#1234 N/A no A link to issue/pull 1234 in UserZ/RepoZ   UserZ/RepoZ!1234 N/A no A link to issue/pull 1234 in UserZ/RepoZ   UserZ/RepoZ#1234 N/A yes A link to external issue 1234 for UserZ/RepoZ   UserZ/RepoZ!1234 N/A yes A link to PR 1234 for UserZ/RepoZ   Alphanumeric issue IDs: - - -   AAA-1234 yes N/A A link to external issue AAA-1234 for User1/Repo1   !1234 yes N/A A link to PR 1234 for User1/Repo1   User1/Repo1!1234 yes N/A A link to PR 1234 for User1/Repo1   Not supported N/A yes A link to external issue AAA-1234 for UserZ/RepoZ   UserZ/RepoZ!1234 N/A yes A link to PR 1234 in UserZ/RepoZ    The last section is for repositories with external issue trackers that use alphanumeric format.\nN/A: not applicable.\nNote: automatic references between repositories with different types of issues (external vs. internal) are not fully supported and may render invalid links.\n","permalink":"https://ertlans.github.io/en-us/automatically-linked-references/","tags":null,"title":"Usage: Automatically Linked References"},{"categories":null,"contents":"Issue and Pull Request Templates Some projects have a standard list of questions that users need to answer when creating an issue or pull request. Gitea supports adding templates to the main branch of the repository so that they can autopopulate the form when users are creating issues and pull requests. This will cut down on the initial back and forth of getting some clarifying details.\nPossible file names for issue templates:\n ISSUE_TEMPLATE.md issue_template.md .gitea/ISSUE_TEMPLATE.md .gitea/issue_template.md .github/ISSUE_TEMPLATE.md .github/issue_template.md  Possible file names for PR templates:\n PULL_REQUEST_TEMPLATE.md pull_request_template.md .gitea/PULL_REQUEST_TEMPLATE.md .gitea/pull_request_template.md .github/PULL_REQUEST_TEMPLATE.md .github/pull_request_template.md  Additionally, the New Issue page URL can be suffixed with ?body=Issue+Text and the form will be populated with that string. This string will be used instead of the template if there is one.\n","permalink":"https://ertlans.github.io/en-us/issue-pull-request-templates/","tags":null,"title":"Usage: Issue and Pull Request templates"},{"categories":null,"contents":"Using Nginx as a reverse proxy If you want Nginx to serve your Gitea instance, add the following server section to the http section of nginx.conf:\nserver { listen 80; server_name git.example.com; location / { proxy_pass http://localhost:3000; } } Using Nginx with a sub-path as a reverse proxy In case you already have a site, and you want Gitea to share the domain name, you can setup Nginx to serve Gitea under a sub-path by adding the following server section inside the http section of nginx.conf:\nserver { listen 80; server_name git.example.com; location /git/ { # Note: Trailing slash proxy_pass http://localhost:3000/; # Note: Trailing slash } } Then set [server] ROOT_URL = http://git.example.com/git/ in your configuration.\nUsing Nginx as a reverse proxy and serve static resources directly We can tune the performance in splitting requests into categories static and dynamic.\nCSS files, JavaScript files, images and web fonts are static content. The front page, a repository view or issue list is dynamic content.\nNginx can serve static resources directly and proxy only the dynamic requests to gitea. Nginx is optimized for serving static content, while the proxying of large responses might be the opposite of that (see https://serverfault.com/q/587386).\nDownload a snapshot of the Gitea source repository to /path/to/gitea/. After this, run make webpack in the repository directory to generate the static resources. We are only interested in the public/ directory for this task, so you can delete the rest. (You will need to have Node with npm and make installed to generate the static resources)\nDepending on the scale of your user base, you might want to split the traffic to two distinct servers, or use a cdn for the static files.\nusing a single node and a single domain Set [server] STATIC_URL_PREFIX = /_/static in your configuration.\nserver { listen 80; server_name git.example.com; location /_/static { alias /path/to/gitea/public; } location / { proxy_pass http://localhost:3000; } } using two nodes and two domains Set [server] STATIC_URL_PREFIX = http://cdn.example.com/gitea in your configuration.\n# application server running gitea server { listen 80; server_name git.example.com; location / { proxy_pass http://localhost:3000; } } # static content delivery server server { listen 80; server_name cdn.example.com; location /gitea { alias /path/to/gitea/public; } location / { return 404; } } Using Apache HTTPD as a reverse proxy If you want Apache HTTPD to serve your Gitea instance, you can add the following to your Apache HTTPD configuration (usually located at /etc/apache2/httpd.conf in Ubuntu):\n\u0026lt;VirtualHost *:80\u0026gt; ... ProxyPreserveHost On ProxyRequests off AllowEncodedSlashes NoDecode ProxyPass / http://localhost:3000/ nocanon ProxyPassReverse / http://localhost:3000/ \u0026lt;/VirtualHost\u0026gt; Note: The following Apache HTTPD mods must be enabled: proxy, proxy_http\nIf you wish to use Let\u0026rsquo;s Encrypt with webroot validation, add the line ProxyPass /.well-known ! before ProxyPass to disable proxying these requests to Gitea.\nUsing Apache HTTPD with a sub-path as a reverse proxy In case you already have a site, and you want Gitea to share the domain name, you can setup Apache HTTPD to serve Gitea under a sub-path by adding the following to you Apache HTTPD configuration (usually located at /etc/apache2/httpd.conf in Ubuntu):\n\u0026lt;VirtualHost *:80\u0026gt; ... \u0026lt;Proxy *\u0026gt; Order allow,deny Allow from all \u0026lt;/Proxy\u0026gt; AllowEncodedSlashes NoDecode # Note: no trailing slash after either /git or port ProxyPass /git http://localhost:3000 nocanon ProxyPassReverse /git http://localhost:3000 \u0026lt;/VirtualHost\u0026gt; Then set [server] ROOT_URL = http://git.example.com/git/ in your configuration.\nNote: The following Apache HTTPD mods must be enabled: proxy, proxy_http\nUsing Caddy as a reverse proxy If you want Caddy to serve your Gitea instance, you can add the following server block to your Caddyfile:\ngit.example.com { proxy / http://localhost:3000 } Using Caddy with a sub-path as a reverse proxy In case you already have a site, and you want Gitea to share the domain name, you can setup Caddy to serve Gitea under a sub-path by adding the following to your server block in your Caddyfile:\ngit.example.com { proxy /git/ http://localhost:3000 # Note: Trailing Slash after /git/ } Then set [server] ROOT_URL = http://git.example.com/git/ in your configuration.\nUsing IIS as a reverse proxy If you wish to run Gitea with IIS. You will need to setup IIS with URL Rewrite as reverse proxy.\n Setup an empty website in IIS, named let\u0026rsquo;s say, Gitea Proxy. Follow the first two steps in Microsoft\u0026rsquo;s Technical Community Guide to Setup IIS with URL Rewrite. That is:   Install Application Request Routing (ARR for short) either by using the Microsoft Web Platform Installer 5.1 (WebPI) or downloading the extension from IIS.net Once the module is installed in IIS, you will see a new Icon in the IIS Administration Console called URL Rewrite. Open the IIS Manager Console and click on the Gitea Proxy Website from the tree view on the left. Select and double click the URL Rewrite Icon from the middle pane to load the URL Rewrite interface. Choose the Add Rule action from the right pane of the management console and select the Reverse Proxy Rule from the Inbound and Outbound Rules category. In the Inbound Rules section, set the server name to be the host that Gitea is running on with its port. e.g. if you are running Gitea on the localhost with port 3000, the following should work: 127.0.0.1:3000 Enable SSL Offloading In the Outbound Rules, ensure Rewrite the domain names of the links in HTTP response is set and set the From: field as above and the To: to your external hostname, say: git.example.com Now edit the web.config for your website to match the following: (changing 127.0.0.1:3000 and git.example.com as appropriate)  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;system.webServer\u0026gt; \u0026lt;rewrite\u0026gt; \u0026lt;rules\u0026gt; \u0026lt;rule name=\u0026#34;ReverseProxyInboundRule1\u0026#34; stopProcessing=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;match url=\u0026#34;(.*)\u0026#34; /\u0026gt; \u0026lt;action type=\u0026#34;Rewrite\u0026#34; url=\u0026#34;http://127.0.0.1:3000/{R:1}\u0026#34; /\u0026gt; \u0026lt;serverVariables\u0026gt; \u0026lt;set name=\u0026#34;HTTP_X_ORIGINAL_ACCEPT_ENCODING\u0026#34; value=\u0026#34;HTTP_ACCEPT_ENCODING\u0026#34; /\u0026gt; \u0026lt;set name=\u0026#34;HTTP_ACCEPT_ENCODING\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/serverVariables\u0026gt; \u0026lt;/rule\u0026gt; \u0026lt;/rules\u0026gt; \u0026lt;outboundRules\u0026gt; \u0026lt;rule name=\u0026#34;ReverseProxyOutboundRule1\u0026#34; preCondition=\u0026#34;ResponseIsHtml1\u0026#34;\u0026gt; \u0026lt;!-- set the pattern correctly here - if you only want to accept http or https --\u0026gt; \u0026lt;!-- change the pattern and the action value as appropriate --\u0026gt; \u0026lt;match filterByTags=\u0026#34;A, Form, Img\u0026#34; pattern=\u0026#34;^http(s)?://127.0.0.1:3000/(.*)\u0026#34; /\u0026gt; \u0026lt;action type=\u0026#34;Rewrite\u0026#34; value=\u0026#34;http{R:1}://git.example.com/{R:2}\u0026#34; /\u0026gt; \u0026lt;/rule\u0026gt; \u0026lt;rule name=\u0026#34;RestoreAcceptEncoding\u0026#34; preCondition=\u0026#34;NeedsRestoringAcceptEncoding\u0026#34;\u0026gt; \u0026lt;match serverVariable=\u0026#34;HTTP_ACCEPT_ENCODING\u0026#34; pattern=\u0026#34;^(.*)\u0026#34; /\u0026gt; \u0026lt;action type=\u0026#34;Rewrite\u0026#34; value=\u0026#34;{HTTP_X_ORIGINAL_ACCEPT_ENCODING}\u0026#34; /\u0026gt; \u0026lt;/rule\u0026gt; \u0026lt;preConditions\u0026gt; \u0026lt;preCondition name=\u0026#34;ResponseIsHtml1\u0026#34;\u0026gt; \u0026lt;add input=\u0026#34;{RESPONSE_CONTENT_TYPE}\u0026#34; pattern=\u0026#34;^text/html\u0026#34; /\u0026gt; \u0026lt;/preCondition\u0026gt; \u0026lt;preCondition name=\u0026#34;NeedsRestoringAcceptEncoding\u0026#34;\u0026gt; \u0026lt;add input=\u0026#34;{HTTP_X_ORIGINAL_ACCEPT_ENCODING}\u0026#34; pattern=\u0026#34;.+\u0026#34; /\u0026gt; \u0026lt;/preCondition\u0026gt; \u0026lt;/preConditions\u0026gt; \u0026lt;/outboundRules\u0026gt; \u0026lt;/rewrite\u0026gt; \u0026lt;urlCompression doDynamicCompression=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/system.webServer\u0026gt; \u0026lt;/configuration\u0026gt; ","permalink":"https://ertlans.github.io/en-us/reverse-proxies/","tags":null,"title":"Usage: Reverse Proxies"},{"categories":null,"contents":"GPG Commit Signatures Gitea will verify GPG commit signatures in the provided tree by checking if the commits are signed by a key within the gitea database, or if the commit matches the default key for git.\nKeys are not checked to determine if they have expired or revoked. Keys are also not checked with keyservers.\nA commit will be marked with a grey unlocked icon if no key can be found to verify it. If a commit is marked with a red unlocked icon, it is reported to be signed with a key with an id.\nPlease note: The signer of a commit does not have to be an author or committer of a commit.\nThis functionality requires git \u0026gt;= 1.7.9 but for full functionality this requires git \u0026gt;= 2.0.0.\nAutomatic Signing There are a number of places where Gitea will generate commits itself:\n Repository Initialisation Wiki Changes CRUD actions using the editor or the API Merges from Pull Requests  Depending on configuration and server trust you may want Gitea to sign these commits.\nInstalling and generating a GPG key for Gitea It is up to a server administrator to determine how best to install a signing key. Gitea generates all its commits using the server git command at present - and therefore the server gpg will be used for signing (if configured.) Administrators should review best-practices for gpg - in particular it is probably advisable to only install a signing secret subkey without the master signing and certifying secret key.\nGeneral Configuration Gitea\u0026rsquo;s configuration for signing can be found with the [repository.signing] section of app.ini:\n... [repository.signing] SIGNING_KEY = default SIGNING_NAME = SIGNING_EMAIL = INITIAL_COMMIT = always CRUD_ACTIONS = pubkey, twofa, parentsigned WIKI = never MERGES = pubkey, twofa, basesigned, commitssigned ... SIGNING_KEY The first option to discuss is the SIGNING_KEY. There are three main options:\n none - this prevents Gitea from signing any commits default - Gitea will default to the key configured within git config KEYID - Gitea will sign commits with the gpg key with the ID KEYID. In this case you should provide a SIGNING_NAME and SIGNING_EMAIL to be displayed for this key.  The default option will interrogate git config for commit.gpgsign option - if this is set, then it will use the results of the user.signingkey, user.name and user.email as appropriate.\nPlease note: by adjusting git\u0026rsquo;s config file within Gitea\u0026rsquo;s repositories, SIGNING_KEY=default could be used to provide different signing keys on a per-repository basis. However, this is clearly not an ideal UI and therefore subject to change.\nINITIAL_COMMIT This option determines whether Gitea should sign the initial commit when creating a repository. The possible values are:\n never: Never sign pubkey: Only sign if the user has a public key twofa: Only sign if the user logs in with two factor authentication always: Always sign  Options other than never and always can be combined as a comma separated list.\nWIKI This options determines if Gitea should sign commits to the Wiki. The possible values are:\n never: Never sign pubkey: Only sign if the user has a public key twofa: Only sign if the user logs in with two factor authentication parentsigned: Only sign if the parent commit is signed. always: Always sign  Options other than never and always can be combined as a comma separated list.\nCRUD_ACTIONS This option determines if Gitea should sign commits from the web editor or API CRUD actions. The possible values are:\n never: Never sign pubkey: Only sign if the user has a public key twofa: Only sign if the user logs in with two factor authentication parentsigned: Only sign if the parent commit is signed. always: Always sign  Options other than never and always can be combined as a comma separated list.\nMERGES This option determines if Gitea should sign merge commits from PRs. The possible options are:\n never: Never sign pubkey: Only sign if the user has a public key twofa: Only sign if the user logs in with two factor authentication basesigned: Only sign if the parent commit in the base repo is signed. headsigned: Only sign if the head commit in the head branch is signed. commitssigned: Only sign if all the commits in the head branch to the merge point are signed. approved: Only sign approved merges to a protected branch. always: Always sign  Options other than never and always can be combined as a comma separated list.\nObtaining the Public Key of the Signing Key The public key used to sign Gitea\u0026rsquo;s commits can be obtained from the API at:\n/api/v1/signing-key.gpg In cases where there is a repository specific key this can be obtained from:\n/api/v1/repos/:username/:reponame/signing-key.gpg ","permalink":"https://ertlans.github.io/en-us/signing/","tags":null,"title":"GPG Commit Signatures"},{"categories":null,"contents":"Specific variables This is an inventory of Gitea environment variables. They change Gitea behaviour.\nInitialize them before Gitea command to be effective, for example:\nGITEA_CUSTOM=/home/gitea/custom ./gitea web From Go language As Gitea is written in Go, it uses some Go variables, such as:\n GOOS GOARCH GOPATH  For documentation about each of the variables available, refer to the official Go documentation.\nGitea files  GITEA_WORK_DIR: Absolute path of working directory. GITEA_CUSTOM: Gitea uses GITEA_WORK_DIR/custom folder by default. Use this variable to change custom directory. GOGS_WORK_DIR: Deprecated, use GITEA_WORK_DIR GOGS_CUSTOM: Deprecated, use GITEA_CUSTOM  Operating system specifics  USER: System user that Gitea will run as. Used for some repository access strings. USERNAME: if no USER found, Gitea will use USERNAME HOME: User home directory path. The USERPROFILE environment variable is used in Windows.  Only on Windows  USERPROFILE: User home directory path. If empty, uses HOMEDRIVE + HOMEPATH HOMEDRIVE: Main drive path used to access the home directory (C:) HOMEPATH: Home relative path in the given home drive path  Macaron (framework used by Gitea)  HOST: Host Macaron will listen on PORT: Port Macaron will listen on MACARON_ENV: global variable to provide special functionality for development environments vs. production environments. If MACARON_ENV is set to \u0026quot;\u0026rdquo; or \u0026ldquo;development\u0026rdquo;, then templates will be recompiled on every request. For more performance, set the MACARON_ENV environment variable to \u0026ldquo;production\u0026rdquo;.  Miscellaneous  SKIP_MINWINSVC: If set to 1, do not run as a service on Windows.  ","permalink":"https://ertlans.github.io/en-us/specific-variables/","tags":null,"title":"Specific variables"},{"categories":null,"contents":"Configuration Cheat Sheet This is a cheat sheet for the Gitea configuration file. It contains most of the settings that can be configured as well as their default values.\nAny changes to the Gitea configuration file should be made in custom/conf/app.ini or any corresponding location. When installing from a distribution, this will typically be found at /etc/gitea/conf/app.ini.\nThe defaults provided here are best-effort (not built automatically). They are accurately recorded in app.ini.sample (s/master/\u0026lt;tag|release\u0026gt;). Any string in the format %(X)s is a feature powered by ini, for reading values recursively.\nValues containing # or ; must be quoted using ` or \u0026quot;\u0026quot;\u0026quot;.\nNote: A full restart is required for Gitea configuration changes to take effect.\nOverall (DEFAULT)  APP_NAME: Gitea: Git with a cup of tea: Application name, used in the page title. RUN_USER: git: The user Gitea will run as. This should be a dedicated system (non-user) account. Setting this incorrectly will cause Gitea to not start. RUN_MODE: dev: For performance and other purposes, change this to prod when deployed to a production environment. The installation process will set this to prod automatically. [prod, dev, test]  Repository (repository)  ROOT: ~/gitea-repositories/: Root path for storing all repository data. It must be an absolute path. SCRIPT_TYPE: bash: The script type this server supports. Usually this is bash, but some users report that only sh is available. ANSI_CHARSET: \u0026lt;empty\u0026gt;: The default charset for an unrecognized charset. FORCE_PRIVATE: false: Force every new repository to be private. DEFAULT_PRIVATE: last: Default private when creating a new repository. [last, private, public] MAX_CREATION_LIMIT: -1: Global maximum creation limit of repositories per user, -1 means no limit. PULL_REQUEST_QUEUE_LENGTH: 1000: Length of pull request patch test queue, make it as large as possible. Use caution when editing this value. MIRROR_QUEUE_LENGTH: 1000: Patch test queue length, increase if pull request patch testing starts hanging. PREFERRED_LICENSES: Apache License 2.0,MIT License: Preferred Licenses to place at the top of the list. Name must match file name in conf/license or custom/conf/license. DISABLE_HTTP_GIT: false: Disable the ability to interact with repositories over the HTTP protocol. USE_COMPAT_SSH_URI: false: Force ssh:// clone url instead of scp-style uri when default SSH port is used. ACCESS_CONTROL_ALLOW_ORIGIN: \u0026lt;empty\u0026gt;: Value for Access-Control-Allow-Origin header, default is not to present. WARNING: This maybe harmful to you website if you do not give it a right value. DEFAULT_CLOSE_ISSUES_VIA_COMMITS_IN_ANY_BRANCH: false: Close an issue if a commit on a non default branch marks it as closed. ENABLE_PUSH_CREATE_USER: false: Allow users to push local repositories to Gitea and have them automatically created for a user. ENABLE_PUSH_CREATE_ORG: false: Allow users to push local repositories to Gitea and have them automatically created for an org. PREFIX_ARCHIVE_FILES: true: Prefix archive files by placing them in a directory named after the repository.  Repository - Pull Request (repository.pull-request)  WORK_IN_PROGRESS_PREFIXES: WIP:,[WIP]: List of prefixes used in Pull Request title to mark them as Work In Progress CLOSE_KEYWORDS: close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved: List of keywords used in Pull Request comments to automatically close a related issue REOPEN_KEYWORDS: reopen, reopens, reopened: List of keywords used in Pull Request comments to automatically reopen a related issue DEFAULT_MERGE_MESSAGE_COMMITS_LIMIT: 50: In the default merge message for squash commits include at most this many commits. Set to -1 to include all commits DEFAULT_MERGE_MESSAGE_SIZE: 5120: In the default merge message for squash commits limit the size of the commit messages. Set to -1 to have no limit. DEFAULT_MERGE_MESSAGE_ALL_AUTHORS: false: In the default merge message for squash commits walk all commits to include all authors in the Co-authored-by otherwise just use those in the limited list DEFAULT_MERGE_MESSAGE_MAX_APPROVERS: 10: In default merge messages limit the number of approvers listed as Reviewed-by:. Set to -1 to include all. DEFAULT_MERGE_MESSAGE_OFFICIAL_APPROVERS_ONLY: true: In default merge messages only include approvers who are officially allowed to review.  Repository - Issue (repository.issue)  LOCK_REASONS: Too heated,Off-topic,Resolved,Spam: A list of reasons why a Pull Request or Issue can be locked  Repository - Signing (repository.signing)  SIGNING_KEY: default: [none, KEYID, default ]: Key to sign with. SIGNING_NAME \u0026amp; SIGNING_EMAIL: if a KEYID is provided as the SIGNING_KEY, use these as the Name and Email address of the signer. These should match publicized name and email address for the key. INITIAL_COMMIT: always: [never, pubkey, twofa, always]: Sign initial commit.  never: Never sign pubkey: Only sign if the user has a public key twofa: Only sign if the user is logged in with twofa always: Always sign Options other than never and always can be combined as a comma separated list.   WIKI: never: [never, pubkey, twofa, always, parentsigned]: Sign commits to wiki. CRUD_ACTIONS: pubkey, twofa, parentsigned: [never, pubkey, twofa, parentsigned, always]: Sign CRUD actions.  Options as above, with the addition of: parentsigned: Only sign if the parent commit is signed.   MERGES: pubkey, twofa, basesigned, commitssigned: [never, pubkey, twofa, approved, basesigned, commitssigned, always]: Sign merges.  approved: Only sign approved merges to a protected branch. basesigned: Only sign if the parent commit in the base repo is signed. headsigned: Only sign if the head commit in the head branch is signed. commitssigned: Only sign if all the commits in the head branch to the merge point are signed.    CORS (cors)  ENABLED: false: enable cors headers (disabled by default) SCHEME: http: scheme of allowed requests ALLOW_DOMAIN: *: list of requesting domains that are allowed ALLOW_SUBDOMAIN: false: allow subdomains of headers listed above to request METHODS: GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS: list of methods allowed to request MAX_AGE: 10m: max time to cache response ALLOW_CREDENTIALS: false: allow request with credentials  UI (ui)  EXPLORE_PAGING_NUM: 20: Number of repositories that are shown in one explore page. ISSUE_PAGING_NUM: 10: Number of issues that are shown in one page (for all pages that list issues). MEMBERS_PAGING_NUM: 20: Number of members that are shown in organization members. FEED_MAX_COMMIT_NUM: 5: Number of maximum commits shown in one activity feed. GRAPH_MAX_COMMIT_NUM: 100: Number of maximum commits shown in the commit graph. DEFAULT_THEME: gitea: [gitea, arc-green]: Set the default theme for the Gitea install. THEMES: gitea,arc-green: All available themes. Allow users select personalized themes regardless of the value of DEFAULT_THEME. REACTIONS: All available reactions users can choose on issues/prs and comments Values can be emoji alias (😄) or a unicode emoji. For custom reactions, add a tightly cropped square image to public/emoji/img/reaction_name.png DEFAULT_SHOW_FULL_NAME: false: Whether the full name of the users should be shown where possible. If the full name isn\u0026rsquo;t set, the username will be used. SEARCH_REPO_DESCRIPTION: true: Whether to search within description at repository search on explore page. USE_SERVICE_WORKER: true: Whether to enable a Service Worker to cache frontend assets.  UI - Admin (ui.admin)  USER_PAGING_NUM: 50: Number of users that are shown in one page. REPO_PAGING_NUM: 50: Number of repos that are shown in one page. NOTICE_PAGING_NUM: 25: Number of notices that are shown in one page. ORG_PAGING_NUM: 50: Number of organizations that are shown in one page.  UI - Notification (ui.notification)  MIN_TIMEOUT: 10s: These options control how often notification is queried to update the notification count. On page load the notification count will be checked after MIN_TIMEOUT. The timeout will increase to MAX_TIMEOUT by TIMEOUT_STEP if the notification count is unchanged. Set MIN_TIMEOUT to 0 to turn off. MAX_TIMEOUT: 60s. TIMEOUT_STEP: 10s.  Markdown (markdown)  ENABLE_HARD_LINE_BREAK: true: Render soft line breaks as hard line breaks, which means a single newline character between paragraphs will cause a line break and adding trailing whitespace to paragraphs is not necessary to force a line break. CUSTOM_URL_SCHEMES: Use a comma separated list (ftp,git,svn) to indicate additional URL hyperlinks to be rendered in Markdown. URLs beginning in http and https are always displayed  Server (server)  PROTOCOL: http: [http, https, fcgi, unix, fcgi+unix] DOMAIN: localhost: Domain name of this server. ROOT_URL: %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/: Overwrite the automatically generated public URL. This is useful if the internal and the external URL don\u0026rsquo;t match (e.g. in Docker). STATIC_URL_PREFIX: \u0026lt;empty\u0026gt;: Overwrite this option to request static resources from a different URL. This includes CSS files, images, JS files and web fonts. Avatar images are dynamic resources and still served by gitea. The option can be just a different path, as in /static, or another domain, as in https://cdn.example.com. Requests are then made as %(ROOT_URL)s/static/css/index.css and https://cdn.example.com/css/index.css respective. The static files are located in the public/ directory of the gitea source repository. HTTP_ADDR: 0.0.0.0: HTTP listen address.  If PROTOCOL is set to fcgi, Gitea will listen for FastCGI requests on TCP socket defined by HTTP_ADDR and HTTP_PORT configuration settings. If PROTOCOL is set to unix or fcgi+unix, this should be the name of the Unix socket file to use.   HTTP_PORT: 3000: HTTP listen port.  If PROTOCOL is set to fcgi, Gitea will listen for FastCGI requests on TCP socket defined by HTTP_ADDR and HTTP_PORT configuration settings.   UNIX_SOCKET_PERMISSION: 666: Permissions for the Unix socket. LOCAL_ROOT_URL: %(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/: Local (DMZ) URL for Gitea workers (such as SSH update) accessing web service. In most cases you do not need to change the default value. Alter it only if your SSH server node is not the same as HTTP node. Do not set this variable if PROTOCOL is set to unix. DISABLE_SSH: false: Disable SSH feature when it\u0026rsquo;s not available. START_SSH_SERVER: false: When enabled, use the built-in SSH server. SSH_DOMAIN: %(DOMAIN)s: Domain name of this server, used for displayed clone URL. SSH_PORT: 22: SSH port displayed in clone URL. SSH_LISTEN_HOST: 0.0.0.0: Listen address for the built-in SSH server. SSH_LISTEN_PORT: %(SSH_PORT)s: Port for the built-in SSH server. OFFLINE_MODE: false: Disables use of CDN for static files and Gravatar for profile pictures. DISABLE_ROUTER_LOG: false: Mute printing of the router log. CERT_FILE: https/cert.pem: Cert file path used for HTTPS. From 1.11 paths are relative to CUSTOM_PATH. KEY_FILE: https/key.pem: Key file path used for HTTPS. From 1.11 paths are relative to CUSTOM_PATH. STATIC_ROOT_PATH: ./: Upper level of template and static files path. STATIC_CACHE_TIME: 6h: Web browser cache time for static resources on custom/, public/ and all uploaded avatars. ENABLE_GZIP: false: Enables application-level GZIP support. LANDING_PAGE: home: Landing page for unauthenticated users [home, explore, organizations, login]. LFS_START_SERVER: false: Enables git-lfs support. LFS_CONTENT_PATH: ./data/lfs: Where to store LFS files. LFS_JWT_SECRET: \u0026lt;empty\u0026gt;: LFS authentication secret, change this a unique string. LFS_HTTP_AUTH_EXPIRY: 20m: LFS authentication validity period in time.Duration, pushes taking longer than this may fail. LFS_MAX_FILE_SIZE: 0: Maximum allowed LFS file size in bytes (Set to 0 for no limit). LFS_LOCK_PAGING_NUM: 50: Maximum number of LFS Locks returned per page. REDIRECT_OTHER_PORT: false: If true and PROTOCOL is https, allows redirecting http requests on PORT_TO_REDIRECT to the https port Gitea listens on. PORT_TO_REDIRECT: 80: Port for the http redirection service to listen on. Used when REDIRECT_OTHER_PORT is true. ENABLE_LETSENCRYPT: false: If enabled you must set DOMAIN to valid internet facing domain (ensure DNS is set and port 80 is accessible by letsencrypt validation server). By using Lets Encrypt you must consent to their terms of service. LETSENCRYPT_ACCEPTTOS: false: This is an explicit check that you accept the terms of service for Let\u0026rsquo;s Encrypt. LETSENCRYPT_DIRECTORY: https: Directory that Letsencrypt will use to cache information such as certs and private keys. LETSENCRYPT_EMAIL: email@example.com: Email used by Letsencrypt to notify about problems with issued certificates. (No default) ALLOW_GRACEFUL_RESTARTS: true: Perform a graceful restart on SIGHUP GRACEFUL_HAMMER_TIME: 60s: After a restart the parent process will stop accepting new connections and will allow requests to finish before stopping. Shutdown will be forced if it takes longer than this time. STARTUP_TIMEOUT: 0: Shutsdown the server if startup takes longer than the provided time. On Windows setting this sends a waithint to the SVC host to tell the SVC host startup may take some time. Please note startup is determined by the opening of the listeners - HTTP/HTTPS/SSH. Indexers may take longer to startup and can have their own timeouts.  Database (database)  DB_TYPE: mysql: The database type in use [mysql, postgres, mssql, sqlite3]. HOST: 127.0.0.1:3306: Database host address and port or absolute path for unix socket [mysql, postgres] (ex: /var/run/mysqld/mysqld.sock). NAME: gitea: Database name. USER: root: Database username. PASSWD: \u0026lt;empty\u0026gt;: Database user password. Use `your password` for quoting if you use special characters in the password. SCHEMA: \u0026lt;empty\u0026gt;: For PostgreSQL only, schema to use if different from \u0026ldquo;public\u0026rdquo;. The schema must exist beforehand, the user must have creation privileges on it, and the user search path must be set to the look into the schema first (e.g. ALTER USER user SET SEARCH_PATH = schema_name,\u0026quot;$user\u0026quot;,public;). SSL_MODE: disable: SSL/TLS encryption mode for connecting to the database. This option is only applied for PostgreSQL and MySQL.  Valid values for MySQL:  true: Enable TLS with verification of the database server certificate against its root certificate. When selecting this option make sure that the root certificate required to validate the database server certificate (e.g. the CA certificate) is on the system certificate store of both the database and Gitea servers. See your system documentation for instructions on how to add a CA certificate to the certificate store. false: Disable TLS. disable: Alias for false, for compatibility with PostgreSQL. skip-verify: Enable TLS without database server certificate verification. Use this option if you have self-signed or invalid certificate on the database server. prefer: Enable TLS with fallback to non-TLS connection.   Valid values for PostgreSQL:  disable: Disable TLS. require: Enable TLS without any verifications. verify-ca: Enable TLS with verification of the database server certificate against its root certificate. verify-full: Enable TLS and verify the database server name matches the given certificate in either the Common Name or Subject Alternative Name fields.     CHARSET: utf8: For MySQL only, either \u0026ldquo;utf8\u0026rdquo; or \u0026ldquo;utf8mb4\u0026rdquo;, default is \u0026ldquo;utf8\u0026rdquo;. NOTICE: for \u0026ldquo;utf8mb4\u0026rdquo; you must use MySQL InnoDB \u0026gt; 5.6. Gitea is unable to check this. PATH: data/gitea.db: For SQLite3 only, the database file path. LOG_SQL: true: Log the executed SQL. DB_RETRIES: 10: How many ORM init / DB connect attempts allowed. DB_RETRY_BACKOFF: 3s: time.Duration to wait before trying another ORM init / DB connect attempt, if failure occured. MAX_OPEN_CONNS 0: Database maximum open connections - default is 0, meaning there is no limit. MAX_IDLE_CONNS 2: Max idle database connections on connnection pool, default is 2 - this will be capped to MAX_OPEN_CONNS. CONN_MAX_LIFETIME 0 or 3s: Sets the maximum amount of time a DB connection may be reused - default is 0, meaning there is no limit (except on MySQL where it is 3s - see #6804 \u0026amp; #7071).  Please see #8540 \u0026amp; #8273 for further discussion of the appropriate values for MAX_OPEN_CONNS, MAX_IDLE_CONNS \u0026amp; CONN_MAX_LIFETIME and their relation to port exhaustion.\nIndexer (indexer)   ISSUE_INDEXER_TYPE: bleve: Issue indexer type, currently supported: bleve, db or elasticsearch.\n  ISSUE_INDEXER_CONN_STR: ****: Issue indexer connection string, available when ISSUE_INDEXER_TYPE is elasticsearch. i.e. http://elastic:changeme@localhost:9200\n  ISSUE_INDEXER_NAME: gitea_issues: Issue indexer name, available when ISSUE_INDEXER_TYPE is elasticsearch\n  ISSUE_INDEXER_PATH: indexers/issues.bleve: Index file used for issue search; available when ISSUE_INDEXER_TYPE is bleve and elasticsearch.\n  The next 4 configuration values are deprecated and should be set in queue.issue_indexer however are kept for backwards compatibility:\n  ISSUE_INDEXER_QUEUE_TYPE: levelqueue: Issue indexer queue, currently supports:channel, levelqueue, redis.\n  ISSUE_INDEXER_QUEUE_DIR: indexers/issues.queue: When ISSUE_INDEXER_QUEUE_TYPE is levelqueue, this will be the queue will be saved path.\n  ISSUE_INDEXER_QUEUE_CONN_STR: addrs=127.0.0.1:6379 db=0: When ISSUE_INDEXER_QUEUE_TYPE is redis, this will store the redis connection string.\n  ISSUE_INDEXER_QUEUE_BATCH_NUMBER: 20: Batch queue number.\n  REPO_INDEXER_ENABLED: false: Enables code search (uses a lot of disk space, about 6 times more than the repository size).\n  REPO_INDEXER_PATH: indexers/repos.bleve: Index file used for code search.\n  REPO_INDEXER_INCLUDE: empty: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to include in the index. Use **.txt to match any files with .txt extension. An empty list means include all files.\n  REPO_INDEXER_EXCLUDE: empty: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to exclude from the index. Files that match this list will not be indexed, even if they match in REPO_INDEXER_INCLUDE.\n  REPO_INDEXER_EXCLUDE_VENDORED: true: Exclude vendored files from index.\n  UPDATE_BUFFER_LEN: 20: Buffer length of index request.\n  MAX_FILE_SIZE: 1048576: Maximum size in bytes of files to be indexed.\n  STARTUP_TIMEOUT: 30s: If the indexer takes longer than this timeout to start - fail. (This timeout will be added to the hammer time above for child processes - as bleve will not start until the previous parent is shutdown.) Set to zero to never timeout.\n  Queue (queue and queue.*)  TYPE: persistable-channel: General queue type, currently support: persistable-channel, channel, level, redis, dummy DATADIR: queues/: Base DataDir for storing persistent and level queues. DATADIR for inidividual queues can be set in queue.name sections but will default to DATADIR/name. LENGTH: 20: Maximal queue size before channel queues block BATCH_LENGTH: 20: Batch data before passing to the handler CONN_STR: addrs=127.0.0.1:6379 db=0: Connection string for the redis queue type. QUEUE_NAME: _queue: The suffix for default redis queue name. Individual queues will default to nameQUEUE_NAME but can be overriden in the specific queue.name section. SET_NAME: _unique: The suffix that will added to the default redis set name for unique queues. Individual queues will default to nameQUEUE_NAME_SET_NAME_ but can be overridden in the specific queue.name section. WRAP_IF_NECESSARY: true: Will wrap queues with a timeoutable queue if the selected queue is not ready to be created - (Only relevant for the level queue.) MAX_ATTEMPTS: 10: Maximum number of attempts to create the wrapped queue TIMEOUT: GRACEFUL_HAMMER_TIME + 30s: Timeout the creation of the wrapped queue if it takes longer than this to create. Queues by default come with a dynamically scaling worker pool. The following settings configure this: WORKERS: 1: Number of initial workers for the queue. MAX_WORKERS: 10: Maximum number of worker go-routines for the queue. BLOCK_TIMEOUT: 1s: If the queue blocks for this time, boost the number of workers - the BLOCK_TIMEOUT will then be doubled before boosting again whilst the boost is ongoing. BOOST_TIMEOUT: 5m: Boost workers will timeout after this long. BOOST_WORKERS: 5: This many workers will be added to the worker pool if there is a boost.  Admin (admin)  DEFAULT_EMAIL_NOTIFICATIONS: enabled: Default configuration for email notifications for users (user configurable). Options: enabled, onmention, disabled  Security (security)  INSTALL_LOCK: false: Disallow access to the install page. SECRET_KEY: \u0026lt;random at every install\u0026gt;: Global secret key. This should be changed. LOGIN_REMEMBER_DAYS: 7: Cookie lifetime, in days. COOKIE_USERNAME: gitea_awesome: Name of the cookie used to store the current username. COOKIE_REMEMBER_NAME: gitea_incredible: Name of cookie used to store authentication information. REVERSE_PROXY_AUTHENTICATION_USER: X-WEBAUTH-USER: Header name for reverse proxy authentication. REVERSE_PROXY_AUTHENTICATION_EMAIL: X-WEBAUTH-EMAIL: Header name for reverse proxy authentication provided email. DISABLE_GIT_HOOKS: false: Set to true to prevent all users (including admin) from creating custom git hooks. ONLY_ALLOW_PUSH_IF_GITEA_ENVIRONMENT_SET: true: Set to false to allow local users to push to gitea-repositories without setting up the Gitea environment. This is not recommended and if you want local users to push to gitea repositories you should set the environment appropriately. IMPORT_LOCAL_PATHS: false: Set to false to prevent all users (including admin) from importing local path on server. INTERNAL_TOKEN: \u0026lt;random at every install if no uri set\u0026gt;: Secret used to validate communication within Gitea binary. INTERNAL_TOKEN_URI: : Instead of defining internal token in the configuration, this configuration option can be used to give Gitea a path to a file that contains the internal token (example value: file:/etc/gitea/internal_token) PASSWORD_HASH_ALGO: pbkdf2: The hash algorithm to use [pbkdf2, argon2, scrypt, bcrypt]. CSRF_COOKIE_HTTP_ONLY: true: Set false to allow JavaScript to read CSRF cookie. PASSWORD_COMPLEXITY: lower,upper,digit,spec: Comma separated list of character classes required to pass minimum complexity. If left empty or no valid values are specified, the default values will be used. Possible values are:  lower - use one or more lower latin characters upper - use one or more upper latin characters digit - use one or more digits spec - use one or more special characters as !\u0026quot;#$%\u0026amp;'()*+,-./:;\u0026lt;=\u0026gt;?@[\\\\]^_`{|}~ off - do not check password complexity    OpenID (openid)  ENABLE_OPENID_SIGNIN: false: Allow authentication in via OpenID. ENABLE_OPENID_SIGNUP: ! DISABLE_REGISTRATION: Allow registering via OpenID. WHITELISTED_URIS: \u0026lt;empty\u0026gt;: If non-empty, list of POSIX regex patterns matching OpenID URI\u0026rsquo;s to permit. BLACKLISTED_URIS: \u0026lt;empty\u0026gt;: If non-empty, list of POSIX regex patterns matching OpenID URI\u0026rsquo;s to block.  Service (service)  ACTIVE_CODE_LIVE_MINUTES: 180: Time limit (min) to confirm account/email registration. RESET_PASSWD_CODE_LIVE_MINUTES: 180: Time limit (min) to confirm forgot password reset process. REGISTER_EMAIL_CONFIRM: false: Enable this to ask for mail confirmation of registration. Requires Mailer to be enabled. DISABLE_REGISTRATION: false: Disable registration, after which only admin can create accounts for users. REQUIRE_EXTERNAL_REGISTRATION_PASSWORD: false: Enable this to force externally created accounts (via GitHub, OpenID Connect, etc) to create a password. Warning: enabling this will decrease security, so you should only enable it if you know what you\u0026rsquo;re doing. REQUIRE_SIGNIN_VIEW: false: Enable this to force users to log in to view any page or to use API. ENABLE_NOTIFY_MAIL: false: Enable this to send e-mail to watchers of a repository when something happens, like creating issues. Requires Mailer to be enabled. ENABLE_BASIC_AUTHENTICATION: true: Disable this to disallow authenticaton using HTTP BASIC and the user\u0026rsquo;s password. Please note if you disable this you will not be able to access the tokens API endpoints using a password. Further, this only disables BASIC authentication using the password - not tokens or OAuth Basic. ENABLE_REVERSE_PROXY_AUTHENTICATION: false: Enable this to allow reverse proxy authentication. ENABLE_REVERSE_PROXY_AUTO_REGISTRATION: false: Enable this to allow auto-registration for reverse authentication. ENABLE_REVERSE_PROXY_EMAIL: false: Enable this to allow to auto-registration with a provided email rather than a generated email. ENABLE_CAPTCHA: false: Enable this to use captcha validation for registration. REQUIRE_EXTERNAL_REGISTRATION_CAPTCHA: false: Enable this to force captcha validation even for External Accounts (i.e. GitHub, OpenID Connect, etc). You must ENABLE_CAPTCHA also. CAPTCHA_TYPE: image: [image, recaptcha] RECAPTCHA_SECRET: \u0026quot;\u0026quot;: Go to https://www.google.com/recaptcha/admin to get a secret for recaptcha. RECAPTCHA_SITEKEY: \u0026quot;\u0026quot;: Go to https://www.google.com/recaptcha/admin to get a sitekey for recaptcha. RECAPTCHA_URL: https://www.google.com/recaptcha/: Set the recaptcha url - allows the use of recaptcha net. DEFAULT_ENABLE_DEPENDENCIES: true: Enable this to have dependencies enabled by default. ALLOW_CROSS_REPOSITORY_DEPENDENCIES : true Enable this to allow dependencies on issues from any repository where the user is granted access. ENABLE_USER_HEATMAP: true: Enable this to display the heatmap on users profiles. EMAIL_DOMAIN_WHITELIST: \u0026lt;empty\u0026gt;: If non-empty, list of domain names that can only be used to register on this instance. SHOW_REGISTRATION_BUTTON: ! DISABLE_REGISTRATION: Show Registration Button SHOW_MILESTONES_DASHBOARD_PAGE: true Enable this to show the milestones dashboard page - a view of all the user\u0026rsquo;s milestones AUTO_WATCH_NEW_REPOS: true: Enable this to let all organisation users watch new repos when they are created AUTO_WATCH_ON_CHANGES: false: Enable this to make users watch a repository after their first commit to it DEFAULT_ORG_VISIBILITY: public: Set default visibility mode for organisations, either \u0026ldquo;public\u0026rdquo;, \u0026ldquo;limited\u0026rdquo; or \u0026ldquo;private\u0026rdquo;. DEFAULT_ORG_MEMBER_VISIBLE: false True will make the membership of the users visible when added to the organisation. ALLOW_ONLY_EXTERNAL_REGISTRATION: false Set to true to force registration only using third-party services. NO_REPLY_ADDRESS: DOMAIN Default value for the domain part of the user\u0026rsquo;s email address in the git log if he has set KeepEmailPrivate to true. The user\u0026rsquo;s email will be replaced with a concatenation of the user name in lower case, \u0026ldquo;@\u0026rdquo; and NO_REPLY_ADDRESS.  Webhook (webhook)  QUEUE_LENGTH: 1000: Hook task queue length. Use caution when editing this value. DELIVER_TIMEOUT: 5: Delivery timeout (sec) for shooting webhooks. SKIP_TLS_VERIFY: false: Allow insecure certification. PAGING_NUM: 10: Number of webhook history events that are shown in one page. PROXY_URL: ****: Proxy server URL, support http://, https//, socks://, blank will follow environment http_proxy/https_proxy PROXY_HOSTS: ***: Comma separated list of host names requiring proxy. Glob patterns () are accepted; use ** to match all hosts.  Mailer (mailer)  ENABLED: false: Enable to use a mail service. DISABLE_HELO: \u0026lt;empty\u0026gt;: Disable HELO operation. HELO_HOSTNAME: \u0026lt;empty\u0026gt;: Custom hostname for HELO operation. HOST: \u0026lt;empty\u0026gt;: SMTP mail host address and port (example: smtp.gitea.io:587). FROM: \u0026lt;empty\u0026gt;: Mail from address, RFC 5322. This can be just an email address, or the \u0026ldquo;Name\u0026rdquo; \u0026lt;email@example.com\u0026gt; format. USER: \u0026lt;empty\u0026gt;: Username of mailing user (usually the sender\u0026rsquo;s e-mail address). PASSWD: \u0026lt;empty\u0026gt;: Password of mailing user. Use `your password` for quoting if you use special characters in the password. SKIP_VERIFY: \u0026lt;empty\u0026gt;: Do not verify the self-signed certificates.  Note: Gitea only supports SMTP with STARTTLS.   SUBJECT_PREFIX: \u0026lt;empty\u0026gt;: Prefix to be placed before e-mail subject lines. MAILER_TYPE: smtp: [smtp, sendmail, dummy]  smtp Use SMTP to send mail sendmail Use the operating system\u0026rsquo;s sendmail command instead of SMTP. This is common on linux systems. dummy Send email messages to the log as a testing phase. Note that enabling sendmail will ignore all other mailer settings except ENABLED, FROM, SUBJECT_PREFIX and SENDMAIL_PATH. Enabling dummy will ignore all settings except ENABLED, SUBJECT_PREFIX and FROM.   SENDMAIL_PATH: sendmail: The location of sendmail on the operating system (can be command or full path). IS_TLS_ENABLED : false : Decide if SMTP connections should use TLS.  Cache (cache)  ENABLED: true: Enable the cache. ADAPTER: memory: Cache engine adapter, either memory, redis, or memcache. INTERVAL: 60: Garbage Collection interval (sec), for memory cache only. HOST: \u0026lt;empty\u0026gt;: Connection string for redis and memcache.  Redis: network=tcp,addr=127.0.0.1:6379,password=macaron,db=0,pool_size=100,idle_timeout=180 Memcache: 127.0.0.1:9090;127.0.0.1:9091   ITEM_TTL: 16h: Time to keep items in cache if not used, Setting it to 0 disables caching.  Cache - LastCommitCache settings (cache.last_commit)  ENABLED: true: Enable the cache. ITEM_TTL: 8760h: Time to keep items in cache if not used, Setting it to 0 disables caching. COMMITS_COUNT: 1000: Only enable the cache when repository\u0026rsquo;s commits count great than.  Session (session)  PROVIDER: memory: Session engine provider [memory, file, redis, mysql, couchbase, memcache, nodb, postgres]. PROVIDER_CONFIG: data/sessions: For file, the root path; for others, the connection string. COOKIE_SECURE: false: Enable this to force using HTTPS for all session access. COOKIE_NAME: i_like_gitea: The name of the cookie used for the session ID. GC_INTERVAL_TIME: 86400: GC interval in seconds.  Picture (picture)  GRAVATAR_SOURCE: gravatar: Can be gravatar, duoshuo or anything like http://cn.gravatar.com/avatar/. DISABLE_GRAVATAR: false: Enable this to use local avatars only. ENABLE_FEDERATED_AVATAR: false: Enable support for federated avatars (see http://www.libravatar.org). AVATAR_UPLOAD_PATH: data/avatars: Path to store user avatar image files. REPOSITORY_AVATAR_UPLOAD_PATH: data/repo-avatars: Path to store repository avatar image files. REPOSITORY_AVATAR_FALLBACK: none: How Gitea deals with missing repository avatars  none = no avatar will be displayed random = random avatar will be generated image = default image will be used (which is set in REPOSITORY_AVATAR_DEFAULT_IMAGE)   REPOSITORY_AVATAR_FALLBACK_IMAGE: /img/repo_default.png: Image used as default repository avatar (if REPOSITORY_AVATAR_FALLBACK is set to image and none was uploaded) AVATAR_MAX_WIDTH: 4096: Maximum avatar image width in pixels. AVATAR_MAX_HEIGHT: 3072: Maximum avatar image height in pixels. AVATAR_MAX_FILE_SIZE: 1048576 (1Mb): Maximum avatar image file size in bytes.  Attachment (attachment)  ENABLED: true: Enable this to allow uploading attachments. PATH: data/attachments: Path to store attachments. ALLOWED_TYPES: see app.ini.sample: Allowed MIME types, e.g. image/jpeg|image/png. Use */* for all types. MAX_SIZE: 4: Maximum size (MB). MAX_FILES: 5: Maximum number of attachments that can be uploaded at once.  Log (log)  ROOT_PATH: \u0026lt;empty\u0026gt;: Root path for log files. MODE: console: Logging mode. For multiple modes, use a comma to separate values. You can configure each mode in per mode log subsections \\[log.modename\\]. By default the file mode will log to $ROOT_PATH/gitea.log. LEVEL: Info: General log level. [Trace, Debug, Info, Warn, Error, Critical, Fatal, None] STACKTRACE_LEVEL: None: Default log level at which to log create stack traces. [Trace, Debug, Info, Warn, Error, Critical, Fatal, None] REDIRECT_MACARON_LOG: false: Redirects the Macaron log to its own logger or the default logger. MACARON: file: Logging mode for the macaron logger, use a comma to separate values. Configure each mode in per mode log subsections \\[log.modename.macaron\\]. By default the file mode will log to $ROOT_PATH/macaron.log. (If you set this to , it will log to default gitea logger.) ROUTER_LOG_LEVEL: Info: The log level that the router should log at. (If you are setting the access log, its recommended to place this at Debug.) ROUTER: console: The mode or name of the log the router should log to. (If you set this to , it will log to default gitea logger.) NB: You must REDIRECT_MACARON_LOG and have DISABLE_ROUTER_LOG set to false for this option to take effect. Configure each mode in per mode log subsections \\[log.modename.router\\]. ENABLE_ACCESS_LOG: false: Creates an access.log in NCSA common log format, or as per the following template ACCESS: file: Logging mode for the access logger, use a comma to separate values. Configure each mode in per mode log subsections \\[log.modename.access\\]. By default the file mode will log to $ROOT_PATH/access.log. (If you set this to , it will log to the default gitea logger.) ACCESS_LOG_TEMPLATE: {{.Ctx.RemoteAddr}} - {{.Identity}} {{.Start.Format \u0026quot;[02/Jan/2006:15:04:05 -0700]\u0026quot; }} \u0026quot;{{.Ctx.Req.Method}} {{.Ctx.Req.URL.RequestURI}} {{.Ctx.Req.Proto}}\u0026quot; {{.ResponseWriter.Status}} {{.ResponseWriter.Size}} \u0026quot;{{.Ctx.Req.Referer}}\\\u0026quot; \\\u0026quot;{{.Ctx.Req.UserAgent}}\u0026quot;: Sets the template used to create the access log.  The following variables are available: Ctx: the macaron.Context of the request. Identity: the SignedUserName or \u0026quot;-\u0026quot; if not logged in. Start: the start time of the request. ResponseWriter: the responseWriter from the request. You must be very careful to ensure that this template does not throw errors or panics as this template runs outside of the panic/recovery script.   ENABLE_XORM_LOG: true: Set whether to perform XORM logging. Please note SQL statement logging can be disabled by setting LOG_SQL to false in the [database] section.  Log subsections (log.name, log.name.*)  LEVEL: log.LEVEL: Sets the log-level of this sublogger. Defaults to the LEVEL set in the global [log] section. STACKTRACE_LEVEL: log.STACKTRACE_LEVEL: Sets the log level at which to log stack traces. MODE: name: Sets the mode of this sublogger - Defaults to the provided subsection name. This allows you to have two different file loggers at different levels. EXPRESSION: \u0026quot;\u0026quot;: A regular expression to match either the function name, file or message. Defaults to empty. Only log messages that match the expression will be saved in the logger. FLAGS: stdflags: A comma separated string representing the log flags. Defaults to stdflags which represents the prefix: 2009/01/23 01:23:23 ...a/b/c/d.go:23:runtime.Caller() [I]: message. none means don\u0026rsquo;t prefix log lines. See modules/log/base.go for more information. PREFIX: \u0026quot;\u0026quot;: An additional prefix for every log line in this logger. Defaults to empty. COLORIZE: false: Colorize the log lines by default  Console log mode (log.console, log.console.*, or MODE=console)  For the console logger COLORIZE will default to true if not on windows or the terminal is determined to be able to color. STDERR: false: Use Stderr instead of Stdout.  File log mode (log.file, log.file.* or MODE=file)  FILE_NAME: Set the file name for this logger. Defaults as described above. If relative will be relative to the ROOT_PATH LOG_ROTATE: true: Rotate the log files. MAX_SIZE_SHIFT: 28: Maximum size shift of a single file, 28 represents 256Mb. DAILY_ROTATE: true: Rotate logs daily. MAX_DAYS: 7: Delete the log file after n days COMPRESS: true: Compress old log files by default with gzip COMPRESSION_LEVEL: -1: Compression level  Conn log mode (log.conn, log.conn.* or MODE=conn)  RECONNECT_ON_MSG: false: Reconnect host for every single message. RECONNECT: false: Try to reconnect when connection is lost. PROTOCOL: tcp: Set the protocol, either \u0026ldquo;tcp\u0026rdquo;, \u0026ldquo;unix\u0026rdquo; or \u0026ldquo;udp\u0026rdquo;. ADDR: :7020: Sets the address to connect to.  SMTP log mode (log.smtp, log.smtp.* or MODE=smtp)  USER: User email address to send from. PASSWD: Password for the smtp server. HOST: 127.0.0.1:25: The SMTP host to connect to. RECEIVERS: Email addresses to send to. SUBJECT: Diagnostic message from Gitea  Cron (cron)  ENABLED: true: Run cron tasks periodically. RUN_AT_START: false: Run cron tasks at application start-up.  Cron - Cleanup old repository archives (cron.archive_cleanup)  ENABLED: true: Enable service. RUN_AT_START: true: Run tasks at start up time (if ENABLED). SCHEDULE: @every 24h: Cron syntax for scheduling repository archive cleanup, e.g. @every 1h. OLDER_THAN: 24h: Archives created more than OLDER_THAN ago are subject to deletion, e.g. 12h.  Cron - Update Mirrors (cron.update_mirrors)  SCHEDULE: @every 10m: Cron syntax for scheduling update mirrors, e.g. @every 3h.  Cron - Repository Health Check (cron.repo_health_check)  SCHEDULE: @every 24h: Cron syntax for scheduling repository health check. TIMEOUT: 60s: Time duration syntax for health check execution timeout. ARGS: \u0026lt;empty\u0026gt;: Arguments for command git fsck, e.g. --unreachable --tags. See more on http://git-scm.com/docs/git-fsck  Cron - Repository Statistics Check (cron.check_repo_stats)  RUN_AT_START: true: Run repository statistics check at start time. SCHEDULE: @every 24h: Cron syntax for scheduling repository statistics check.  Cron - Update Migration Poster ID (cron.update_migration_poster_id)  SCHEDULE: @every 24h : Interval as a duration between each synchronization, it will always attempt synchronization when the instance starts.  Git (git)  PATH: \u0026quot;\u0026quot;: The path of git executable. If empty, Gitea searches through the PATH environment. MAX_GIT_DIFF_LINES: 100: Max number of lines allowed of a single file in diff view. MAX_GIT_DIFF_LINE_CHARACTERS: 5000: Max character count per line highlighted in diff view. MAX_GIT_DIFF_FILES: 100: Max number of files shown in diff view. GC_ARGS: \u0026lt;empty\u0026gt;: Arguments for command git gc, e.g. --aggressive --auto. See more on http://git-scm.com/docs/git-gc/ ENABLE_AUTO_GIT_WIRE_PROTOCOL: true: If use git wire protocol version 2 when git version \u0026gt;= 2.18, default is true, set to false when you always want git wire protocol version 1 PULL_REQUEST_PUSH_MESSAGE: true: Respond to pushes to a non-default branch with a URL for creating a Pull Request (if the repository has them enabled) VERBOSE_PUSH: true: Print status information about pushes as they are being processed. VERBOSE_PUSH_DELAY: 5s: Only print verbose information if push takes longer than this delay.  Git - Timeout settings (git.timeout)  DEFAUlT: 360: Git operations default timeout seconds. MIGRATE: 600: Migrate external repositories timeout seconds. MIRROR: 300: Mirror external repositories timeout seconds. CLONE: 300: Git clone from internal repositories timeout seconds. PULL: 300: Git pull from internal repositories timeout seconds. GC: 60: Git repository GC timeout seconds.  Metrics (metrics)  ENABLED: false: Enables /metrics endpoint for prometheus. TOKEN: \u0026lt;empty\u0026gt;: You need to specify the token, if you want to include in the authorization the metrics . The same token need to be used in prometheus parameters bearer_token or bearer_token_file.  API (api)  ENABLE_SWAGGER: true: Enables /api/swagger, /api/v1/swagger etc. endpoints. True or false; default is true. MAX_RESPONSE_ITEMS: 50: Max number of items in a page. DEFAULT_PAGING_NUM: 30: Default paging number of API. DEFAULT_GIT_TREES_PER_PAGE: 1000: Default and maximum number of items per page for git trees API. DEFAULT_MAX_BLOB_SIZE: 10485760: Default max size of a blob that can be return by the blobs API.  OAuth2 (oauth2)  ENABLE: true: Enables OAuth2 provider. ACCESS_TOKEN_EXPIRATION_TIME: 3600: Lifetime of an OAuth2 access token in seconds REFRESH_TOKEN_EXPIRATION_TIME: 730: Lifetime of an OAuth2 access token in hours INVALIDATE_REFRESH_TOKEN: false: Check if refresh token got already used JWT_SECRET: \u0026lt;empty\u0026gt;: OAuth2 authentication secret for access and refresh tokens, change this a unique string. MAX_TOKEN_LENGTH: 32767: Maximum length of token/cookie to accept from OAuth2 provider  i18n (i18n)  LANGS: en-US,zh-CN,zh-HK,zh-TW,de-DE,fr-FR,nl-NL,lv-LV,ru-RU,ja-JP,es-ES,pt-BR,pl-PL,bg-BG,it-IT,fi-FI,tr-TR,cs-CZ,sr-SP,sv-SE,ko-KR: List of locales shown in language selector NAMES: English,简体中文,繁體中文（香港）,繁體中文（台灣）,Deutsch,français,Nederlands,latviešu,русский,日本語,español,português do Brasil,polski,български,italiano,suomi,Türkçe,čeština,српски,svenska,한국어: Visible names corresponding to the locales  i18n - Datepicker Language (i18n.datelang) Maps locales to the languages used by the datepicker plugin\n en-US: en zh-CN: zh zh-HK: zh-HK zh-TW: zh-TW de-DE: de fr-FR: fr nl-NL: nl lv-LV: lv ru-RU: ru ja-JP: ja es-ES: es pt-BR: pt-BR pl-PL: pl bg-BG: bg it-IT: it fi-FI: fi tr-TR: tr cs-CZ: cs-CZ sr-SP: sr sv-SE: sv ko-KR: ko  U2F (U2F)  APP_ID: ROOT_URL: Declares the facet of the application. Requires HTTPS. TRUSTED_FACETS: List of additional facets which are trusted. This is not support by all browsers.  Markup (markup) Gitea can support Markup using external tools. The example below will add a markup named asciidoc.\n[markup.asciidoc] ENABLED = true FILE_EXTENSIONS = .adoc,.asciidoc RENDER_COMMAND = \u0026#34;asciidoc --out-file=- -\u0026#34; IS_INPUT_FILE = false  ENABLED: false Enable markup support; set to true to enable this renderer. FILE_EXTENSIONS: \u0026lt;empty\u0026gt; List of file extensions that should be rendered by an external command. Multiple extentions needs a comma as splitter. RENDER_COMMAND: External command to render all matching extensions. IS_INPUT_FILE: false Input is not a standard input but a file param followed RENDER_COMMAND.  Two special environment variables are passed to the render command:\n GITEA_PREFIX_SRC, which contains the current URL prefix in the src path tree. To be used as prefix for links. GITEA_PREFIX_RAW, which contains the current URL prefix in the raw path tree. To be used as prefix for image paths.  Gitea supports customizing the sanitization policy for rendered HTML. The example below will support KaTeX output from pandoc.\n[markup.sanitizer.TeX] ; Pandoc renders TeX segments as \u0026lt;span\u0026gt;s with the \u0026#34;math\u0026#34; class, optionally ; with \u0026#34;inline\u0026#34; or \u0026#34;display\u0026#34; classes depending on context. ELEMENT = span ALLOW_ATTR = class REGEXP = ^\\s*((math(\\s+|$)|inline(\\s+|$)|display(\\s+|$)))+  ELEMENT: The element this policy applies to. Must be non-empty. ALLOW_ATTR: The attribute this policy allows. Must be non-empty. REGEXP: A regex to match the contents of the attribute against. Must be present but may be empty for unconditional whitelisting of this attribute.  Multiple sanitisation rules can be defined by adding unique subsections, e.g. [markup.sanitizer.TeX-2].\nTime (time)  FORMAT: Time format to diplay on UI. i.e. RFC1123 or 2006-01-02 15:04:05 DEFAULT_UI_LOCATION: Default location of time on the UI, so that we can display correct user\u0026rsquo;s time on UI. i.e. Shanghai/Asia  Task (task) Task queue configuration has been moved to queue.task. However, the below configuration values are kept for backwards compatibility:\n QUEUE_TYPE: channel: Task queue type, could be channel or redis. QUEUE_LENGTH: 1000: Task queue length, available only when QUEUE_TYPE is channel. QUEUE_CONN_STR: addrs=127.0.0.1:6379 db=0: Task queue connection string, available only when QUEUE_TYPE is redis. If redis needs a password, use addrs=127.0.0.1:6379 password=123 db=0.  Migrations (migrations)  MAX_ATTEMPTS: 3: Max attempts per http/https request on migrations. RETRY_BACKOFF: 3: Backoff time per http/https request retry (seconds)  Other (other)  SHOW_FOOTER_BRANDING: false: Show Gitea branding in the footer. SHOW_FOOTER_VERSION: true: Show Gitea version information in the footer. SHOW_FOOTER_TEMPLATE_LOAD_TIME: true: Show time of template execution in the footer.  ","permalink":"https://ertlans.github.io/en-us/config-cheat-sheet/","tags":null,"title":"Config Cheat Sheet"},{"categories":null,"contents":"Search engines indexation of your Gitea installation By default your Gitea installation will be indexed by search engines. If you don\u0026rsquo;t want your repository to be visible for search engines read further.\nBlock search engines indexation using robots.txt To make Gitea serve a custom robots.txt (default: empty 404) for top level installations, create a file called robots.txt in the custom folder or CustomPath\nExamples on how to configure the robots.txt can be found at https://moz.com/learn/seo/robotstxt.\nUser-agent: * Disallow: / If you installed Gitea in a subdirectory, you will need to create or edit the robots.txt in the top level directory.\nUser-agent: * Disallow: /gitea/ ","permalink":"https://ertlans.github.io/en-us/search-engines-indexation/","tags":null,"title":"Advanced: Search Engines Indexation"},{"categories":null,"contents":"Migration Features The new migration features were introduced in Gitea 1.9.0. It defines two interfaces to support migrating repositories data from other git host platforms to gitea or, in the future migrating gitea data to other git host platforms. Currently, only the migrations from github via APIv3 to Gitea is implemented.\nFirst of all, Gitea defines some standard objects in packages modules/migrations/base. They are Repository, Milestone, Release, Label, Issue, Comment, PullRequest, Reaction, Review, ReviewComment.\nDownloader Interfaces To migrate from a new git host platform, there are two steps to be updated.\n You should implement a Downloader which will get all kinds of repository informations. You should implement a DownloaderFactory which is used to detect if the URL matches and create a Downloader. You\u0026rsquo;ll need to register the DownloaderFactory via RegisterDownloaderFactory on init.  type Downloader interface { SetContext(context.Context) GetRepoInfo() (*Repository, error) GetTopics() ([]string, error) GetMilestones() ([]*Milestone, error) GetReleases() ([]*Release, error) GetLabels() ([]*Label, error) GetIssues(page, perPage int) ([]*Issue, bool, error) GetComments(issueNumber int64) ([]*Comment, error) GetPullRequests(page, perPage int) ([]*PullRequest, error) GetReviews(pullRequestNumber int64) ([]*Review, error) } type DownloaderFactory interface { Match(opts MigrateOptions) (bool, error) New(opts MigrateOptions) (Downloader, error) } Uploader Interface Currently, only a GiteaLocalUploader is implemented, so we only save downloaded data via this Uploader on the local Gitea instance. Other uploaders are not supported and will be implemented in future.\n// Uploader uploads all the informations type Uploader interface { MaxBatchInsertSize(tp string) int CreateRepo(repo *Repository, opts MigrateOptions) error CreateTopics(topic ...string) error CreateMilestones(milestones ...*Milestone) error CreateReleases(releases ...*Release) error SyncTags() error CreateLabels(labels ...*Label) error CreateIssues(issues ...*Issue) error CreateComments(comments ...*Comment) error CreatePullRequests(prs ...*PullRequest) error CreateReviews(reviews ...*Review) error Rollback() error Close() } ","permalink":"https://ertlans.github.io/en-us/migrations-interfaces/","tags":null,"title":"Advanced: Migrations Interfaces"},{"categories":null,"contents":"","permalink":"https://ertlans.github.io/en-us/advanced/","tags":null,"title":"Advanced"},{"categories":null,"contents":"","permalink":"https://ertlans.github.io/en-us/usage/","tags":null,"title":"Usage"},{"categories":null,"contents":"Embedded data extraction tool Gitea\u0026rsquo;s executable contains all the resources required to run: templates, images, style-sheets and translations. Any of them can be overridden by placing a replacement in a matching path inside the custom directory (see Customizing Gitea).\nTo obtain a copy of the embedded resources ready for editing, the embedded command from the CLI can be used from the OS shell interface.\nNOTE: The embedded data extraction tool is included in Gitea versions 1.12 and above.\nListing resources To list resources embedded in Gitea\u0026rsquo;s executable, use the following syntax:\ngitea embedded list [--include-vendored] [patterns...] The --include-vendored flag makes the command include vendored files, which are normally excluded; that is, files from external libraries that are required for Gitea (e.g. font-awesome, octicons, etc).\nA list of file search patterns can be provided. Gitea uses gobwas/glob for its glob syntax. Here are some examples:\n List all template files, in any virtual directory: **.tmpl List all mail template files: templates/mail/**.tmpl List all files inside public/img: public/img/**  Don\u0026rsquo;t forget to use quotes for the patterns, as spaces, * and other characters might have a special meaning for your command shell.\nIf no pattern is provided, all files are listed.\nExample Listing all embedded files with openid in their path:\n$ gitea embedded list '**openid**' public/img/auth/openid_connect.png public/img/openid-16x16.png templates/user/auth/finalize_openid.tmpl templates/user/auth/signin_openid.tmpl templates/user/auth/signup_openid_connect.tmpl templates/user/auth/signup_openid_navbar.tmpl templates/user/auth/signup_openid_register.tmpl templates/user/settings/security_openid.tmpl Extracting resources To extract resources embedded in Gitea\u0026rsquo;s executable, use the following syntax:\ngitea [--config {file}] embedded extract [--destination {dir}|--custom] [--overwrite|--rename] [--include-vendored] {patterns...} The --config option tells gitea the location of the app.ini configuration file if it\u0026rsquo;s not in its default location. This option is only used with the --custom flag.\nThe --destination option tells gitea the directory where the files must be extracted to. The default is the current directory.\nThe --custom flag tells gitea to extract the files directly into the custom directory. For this to work, the command needs to know the location of the app.ini configuration file (--config) and, depending of the configuration, be ran from the directory where gitea normally starts. See Customizing Gitea for details.\nThe --overwrite flag allows any existing files in the destination directory to be overwritten.\nThe --rename flag tells gitea to rename any existing files in the destination directory as filename.bak. Previous .bak files are overwritten.\nAt least one file search pattern must be provided; see list subcomand above for pattern syntax and examples.\nImportant notice Make sure to only extract those files that require customization. Files that are present in the custom directory are not upgraded by Gitea\u0026rsquo;s upgrade process. When Gitea is upgraded to a new version (by replacing the executable), many of the embedded files will suffer changes. Gitea will honor and use any files found in the custom directory, even if they are old and incompatible.\nExample Extracting mail templates to a temporary directory:\n$ mkdir tempdir $ gitea embedded extract --destination tempdir 'templates/mail/**.tmpl' Extracting to tempdir: tempdir/templates/mail/auth/activate.tmpl tempdir/templates/mail/auth/activate_email.tmpl tempdir/templates/mail/auth/register_notify.tmpl tempdir/templates/mail/auth/reset_passwd.tmpl tempdir/templates/mail/issue/assigned.tmpl tempdir/templates/mail/issue/default.tmpl tempdir/templates/mail/notify/collaborator.tmpl ","permalink":"https://ertlans.github.io/en-us/cmd-embedded/","tags":null,"title":"Embedded data extraction tool"},{"categories":null,"contents":"Gitea API Usage Enabling/configuring API access By default, ENABLE_SWAGGER is true, and MAX_RESPONSE_ITEMS is set to 50. See Config Cheat Sheet for more information.\nAuthentication via the API Gitea supports these methods of API authentication:\n HTTP basic authentication token=... parameter in URL query string access_token=... parameter in URL query string Authorization: token ... header in HTTP headers  All of these methods accept the same API key token type. You can better understand this by looking at the code \u0026ndash; as of this writing, Gitea parses queries and headers to find the token in modules/auth/auth.go.\nYou can create an API key token via your Gitea installation\u0026rsquo;s web interface: Settings | Applications | Generate New Token.\nOAuth2 Access tokens obtained from Gitea\u0026rsquo;s OAuth2 provider are accepted by these methods:\n Authorization bearer ... header in HTTP headers token=... parameter in URL query string access_token=... parameter in URL query string  More on the Authorization: header For historical reasons, Gitea needs the word token included before the API key token in an authorization header, like this:\nAuthorization: token 65eaa9c8ef52460d22a93307fe0aee76289dc675 In a curl command, for instance, this would look like:\ncurl -X POST \u0026quot;http://localhost:4000/api/v1/repos/test1/test1/issues\u0026quot; \\ -H \u0026quot;accept: application/json\u0026quot; \\ -H \u0026quot;Authorization: token 65eaa9c8ef52460d22a93307fe0aee76289dc675\u0026quot; \\ -H \u0026quot;Content-Type: application/json\u0026quot; -d \u0026quot;{ \\\u0026quot;body\\\u0026quot;: \\\u0026quot;testing\\\u0026quot;, \\\u0026quot;title\\\u0026quot;: \\\u0026quot;test 20\\\u0026quot;}\u0026quot; -i As mentioned above, the token used is the same one you would use in the token= string in a GET request.\nAPI Guide: API Reference guide is auto-generated by swagger and available on: https://gitea.your.host/api/swagger or on gitea demo instance\nListing your issued tokens via the API As mentioned in #3842, /users/:name/tokens is special and requires you to authenticate using BasicAuth, as follows:\nUsing basic authentication: $ curl --request GET --url https://yourusername:yourpassword@gitea.your.host/api/v1/users/yourusername/tokens [{\u0026quot;name\u0026quot;:\u0026quot;test\u0026quot;,\u0026quot;sha1\u0026quot;:\u0026quot;...\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;dev\u0026quot;,\u0026quot;sha1\u0026quot;:\u0026quot;...\u0026quot;}] As of v1.8.0 of Gitea, if using basic authentication with the API and your user has two factor authentication enabled, you\u0026rsquo;ll need to send an additional header that contains the one time password (6 digit rotating token). An example of the header is X-Gitea-OTP: 123456 where 123456 is where you\u0026rsquo;d place the code from your authenticator. Here is how the request would look like in curl:\n$ curl -H \u0026quot;X-Gitea-OTP: 123456\u0026quot; --request GET --url https://yourusername:yourpassword@gitea.your.host/api/v1/users/yourusername/tokens Sudo The API allows admin users to sudo API requests as another user. Simply add either a sudo= parameter or Sudo: request header with the username of the user to sudo.\n","permalink":"https://ertlans.github.io/en-us/api-usage/","tags":null,"title":"API Usage"},{"categories":null,"contents":"Gitea and CI/CD NOTE: These tools are not endorsed by Gitea. They are listed here for convenience only.\nHey! This page may be out of date or even removed in the future! 😱 Instead, check out awesome-gitea!\nListing CI/CD solutions that have integration with Gitea. Following list is not complete, the purpose is to give a starting point to integrate a CI/CD process with your Gitea instance.\n Drone with Gitea documentation Jenkins with Gitea plugin Agola Buildkite with Gitea connector AppVeyor with built-in Gitea support Buildbot with Gitea plugin  Others CI/CD solutions that can partially be integrated with Gitea:\n Concourse, see more information at Concourse community forum  ","permalink":"https://ertlans.github.io/en-us/ci-cd/","tags":null,"title":"CI/CD Usage"},{"categories":null,"contents":"Custom files rendering configuration Gitea supports custom file renderings (i.e., Jupyter notebooks, asciidoc, etc.) through external binaries, it is just a matter of:\n installing external binaries add some configuration to your app.ini file restart your Gitea instance  This supports rendering of whole files. If you want to render code blocks in markdown you would need to do something with javascript. See some examples on the Customizing Gitea page.\nInstalling external binaries In order to get file rendering through external binaries, their associated packages must be installed. If you\u0026rsquo;re using a Docker image, your Dockerfile should contain something along this lines:\nFROM gitea/gitea:1.11.4 [...] COPY custom/app.ini /data/gitea/conf/app.ini [...] RUN apk --no-cache add asciidoctor freetype freetype-dev gcc g++ libpng python-dev py-pip python3-dev py3-pip py3-pyzmq # install any other package you need for your external renderers RUN pip3 install --upgrade pip RUN pip3 install -U setuptools RUN pip3 install jupyter matplotlib docutils # add above any other python package you may need to install app.ini file configuration add one [markup.XXXXX] section per external renderer on your custom app.ini:\n[markup.asciidoc] ENABLED = true FILE_EXTENSIONS = .adoc,.asciidoc RENDER_COMMAND = \u0026quot;asciidoctor -e -a leveloffset=-1 --out-file=- -\u0026quot; ; Input is not a standard input but a file IS_INPUT_FILE = false [markup.jupyter] ENABLED = true FILE_EXTENSIONS = .ipynb RENDER_COMMAND = \u0026quot;jupyter nbconvert --stdout --to html --template basic \u0026quot; IS_INPUT_FILE = true [markup.restructuredtext] ENABLED = true FILE_EXTENSIONS = .rst RENDER_COMMAND = rst2html.py IS_INPUT_FILE = false If your external markup relies on additional classes and attributes on the generated HTML elements, you might need to enable custom sanitizer policies. Gitea uses the bluemonday package as our HTML sanitizier. The example below will support KaTeX output from pandoc.\n[markup.sanitizer.TeX] ; Pandoc renders TeX segments as \u0026lt;span\u0026gt;s with the \u0026#34;math\u0026#34; class, optionally ; with \u0026#34;inline\u0026#34; or \u0026#34;display\u0026#34; classes depending on context. ELEMENT = span ALLOW_ATTR = class REGEXP = ^\\s*((math(\\s+|$)|inline(\\s+|$)|display(\\s+|$)))+ [markup.markdown] ENABLED = true FILE_EXTENSIONS = .md,.markdown RENDER_COMMAND = pandoc -f markdown -t html --katex You must define ELEMENT, ALLOW_ATTR, and REGEXP in each section.\nTo define multiple entries, add a unique alphanumeric suffix (e.g., [markup.sanitizer.1] and [markup.sanitizer.something]).\nOnce your configuration changes have been made, restart Gitea to have changes take effect.\nNote: Prior to Gitea 1.12 there was a single markup.sanitiser section with keys that were redefined for multiple rules, however, there were significant problems with this method of configuration necessitating configuration through multiple sections.\n","permalink":"https://ertlans.github.io/en-us/external-renderers/","tags":null,"title":"External renderers"},{"categories":null,"contents":"Repository indexer Setting up the repository indexer Gitea can search through the files of the repositories by enabling this function in your app.ini:\n[indexer] ; ... REPO_INDEXER_ENABLED = true REPO_INDEXER_PATH = indexers/repos.bleve UPDATE_BUFFER_LEN = 20 MAX_FILE_SIZE = 1048576 REPO_INDEXER_INCLUDE = REPO_INDEXER_EXCLUDE = resources/bin/** Please bear in mind that indexing the contents can consume a lot of system resources, especially when the index is created for the first time or globally updated (e.g. after upgrading Gitea).\nChoosing the files for indexing by size The MAX_FILE_SIZE option will make the indexer skip all files larger than the specified value.\nChoosing the files for indexing by path Gitea applies glob pattern matching from the gobwas/glob library to choose which files will be included in the index.\nLimiting the list of files prevents the indexes from becoming polluted with derived or irrelevant files (e.g. lss, sym, map, etc.), so the search results are more relevant. It can also help reduce the index size.\nREPO_INDEXER_EXCLUDE_VENDORED (default: true) excludes vendored files from index.\nREPO_INDEXER_INCLUDE (default: empty) is a comma separated list of glob patterns to include in the index. An empty list means \u0026ldquo;include all files\u0026quot;. REPO_INDEXER_EXCLUDE (default: empty) is a comma separated list of glob patterns to exclude from the index. Files that match this list will not be indexed. REPO_INDEXER_EXCLUDE takes precedence over REPO_INDEXER_INCLUDE.\nPattern matching works as follows:\n To match all files with a .txt extension no matter what directory, use **.txt. To match all files with a .txt extension only at the root level of the repository, use *.txt. To match all files inside resources/bin and below, use resources/bin/**. To match all files immediately inside resources/bin, use resources/bin/*. To match all files named Makefile, use **Makefile. Matching a directory has no effect; the pattern resources/bin will not include/exclude files inside that directory; resources/bin/** will. All files and patterns are normalized to lower case, so **Makefile, **makefile and **MAKEFILE are equivalent.  ","permalink":"https://ertlans.github.io/en-us/repo-indexer/","tags":null,"title":"Repository indexer"},{"categories":null,"contents":"List of third-party tools NOTE: These tools are not endorsed by Gitea. They are listed here for convenience only.\nHey! This page may be out of date or even removed in the future! 😱 Instead, check out awesome-gitea!\nContinuous Integration Check our CI/CD page\nInternationalization  Weblate  Migrating  Installation script for Gitea GitHub Migrator  Mobile  GitNex for Android  Editor Extensions  Gitea Extension for Visual Studio  Download from Visual Studio Marketplace    Project Management  YouTrack by JetBrains  ","permalink":"https://ertlans.github.io/en-us/third-party-tools/","tags":null,"title":"Advanced: Third Party Tools"},{"categories":null,"contents":"Logging Configuration The logging framework has been revamped in Gitea 1.9.0.\nLog Groups The fundamental thing to be aware of in Gitea is that there are several log groups:\n The \u0026ldquo;Default\u0026rdquo; logger The Macaron logger The Router logger The Access logger The XORM logger  There is also the go log logger.\nThe go log logger Go provides its own extremely basic logger in the log package, however, this is not sufficient for our purposes as it does not provide a way of logging at multiple levels, nor does it provide a good way of controlling where these logs are logged except through setting of a writer.\nWe have therefore redirected this logger to our Default logger, and we will log anything that is logged using the go logger at the INFO level.\nThe \u0026ldquo;Default\u0026rdquo; logger Calls to log.Info, log.Debug, log.Error etc. from the code.gitea.io/gitea/modules/log package will log to this logger.\nYou can configure the outputs of this logger by setting the MODE value in the [log] section of the configuration.\nEach output sublogger is configured in a separate [log.sublogger] section, but there are certain default values. These will not be inherited from the [log] section:\n FLAGS is stdflags (Equal to date,time,medfile,shortfuncname,levelinitial) FILE_NAME will default to %(ROOT_PATH)/gitea.log EXPRESSION will default to \u0026quot;\u0026quot; PREFIX will default to \u0026quot;\u0026quot;  The provider type of the sublogger can be set using the MODE value in its subsection, but will default to the name. This allows you to have multiple subloggers that will log to files.\nThe \u0026ldquo;Macaron\u0026rdquo; logger By default Macaron will log to its own go log instance. This writes to os.Stdout. You can redirect this log to a Gitea configurable logger through setting the REDIRECT_MACARON_LOG setting in the [log] section which you can configure the outputs of by setting the MACARON value in the [log] section of the configuration. MACARON defaults to file if unset.\nEach output sublogger for this logger is configured in [log.sublogger.macaron] sections. There are certain default values which will not be inherited from the [log] or relevant [log.sublogger] sections:\n FLAGS is stdflags (Equal to date,time,medfile,shortfuncname,levelinitial) FILE_NAME will default to %(ROOT_PATH)/macaron.log EXPRESSION will default to \u0026quot;\u0026quot; PREFIX will default to \u0026quot;\u0026quot;  NB: You can redirect the macaron logger to send its events to the gitea log using the value: MACARON = ,\nThe \u0026ldquo;Router\u0026rdquo; logger There are two types of Router log. By default Macaron send its own router log which will be directed to Macaron\u0026rsquo;s go log, however if you REDIRECT_MACARON_LOG you will enable Gitea\u0026rsquo;s router log. You can disable both types of Router log by setting DISABLE_ROUTER_LOG.\nIf you enable the redirect, you can configure the outputs of this router log by setting the ROUTER value in the [log] section of the configuration. ROUTER will default to console if unset. The Gitea Router logs the same data as the Macaron log but has slightly different coloring. It logs at the Info level by default, but this can be changed if desired by setting the ROUTER_LOG_LEVEL value.\nEach output sublogger for this logger is configured in [log.sublogger.router] sections. There are certain default values which will not be inherited from the [log] or relevant [log.sublogger] sections:\n FILE_NAME will default to %(ROOT_PATH)/router.log FLAGS defaults to date,time EXPRESSION will default to \u0026quot;\u0026quot; PREFIX will default to \u0026quot;\u0026quot;  NB: You can redirect the router logger to send its events to the Gitea log using the value: ROUTER = ,\nThe \u0026ldquo;Access\u0026rdquo; logger The Access logger is a new logger for version 1.9. It provides a NCSA Common Log compliant log format. It\u0026rsquo;s highly configurable but caution should be taken when changing its template. The main benefit of this logger is that Gitea can now log accesses in a standard log format so standard tools may be used.\nYou can enable this logger using ENABLE_ACCESS_LOG. Its outputs are configured by setting the ACCESS value in the [log] section of the configuration. ACCESS defaults to file if unset.\nEach output sublogger for this logger is configured in [log.sublogger.access] sections. There are certain default values which will not be inherited from the [log] or relevant [log.sublogger] sections:\n FILE_NAME will default to %(ROOT_PATH)/access.log FLAGS defaults to `` or None EXPRESSION will default to \u0026quot;\u0026quot; PREFIX will default to \u0026quot;\u0026quot;  If desired the format of the Access logger can be changed by changing the value of the ACCESS_LOG_TEMPLATE.\nNB: You can redirect the access logger to send its events to the Gitea log using the value: ACCESS = ,\nThe ACCESS_LOG_TEMPLATE This value represent a go template. It\u0026rsquo;s default value is:\n{{.Ctx.RemoteAddr}} - {{.Identity}} {{.Start.Format \u0026quot;[02/Jan/2006:15:04:05 -0700]\u0026quot; }} \u0026quot;{{.Ctx.Req.Method}} {{.Ctx.Req.URL.RequestURI}} {{.Ctx.Req.Proto}}\u0026quot; {{.ResponseWriter.Status}} {{.ResponseWriter.Size}} \u0026quot;{{.Ctx.Req.Referer}}\\\u0026quot; \\\u0026quot;{{.Ctx.Req.UserAgent}}\u0026quot;\nThe template is passed following options:\n Ctx is the macaron.Context Identity is the SignedUserName or \u0026quot;-\u0026quot; if the user is not logged in Start is the start time of the request ResponseWriter is the macaron.ResponseWriter  Caution must be taken when changing this template as it runs outside of the standard panic recovery trap. The template should also be as simple as it runs for every request.\nThe \u0026ldquo;XORM\u0026rdquo; logger The XORM logger is a long-standing logger that exists to collect XORM log events. It is enabled by default but can be switched off by setting ENABLE_XORM_LOG to false in the [log] section. Its outputs are configured by setting the XORM value in the [log] section of the configuration. XORM defaults to , if unset, meaning it is redirected to the main Gitea log.\nXORM will log SQL events by default. This can be changed by setting the LOG_SQL value to false in the [database] section.\nEach output sublogger for this logger is configured in [log.sublogger.xorm] sections. There are certain default values which will not be inherited from the [log] or relevant [log.sublogger] sections:\n FILE_NAME will default to %(ROOT_PATH)/xorm.log FLAGS defaults to date,time EXPRESSION will default to \u0026quot;\u0026quot; PREFIX will default to \u0026quot;\u0026quot;  Log outputs Gitea provides 4 possible log outputs:\n console - Log to os.Stdout or os.Stderr file - Log to a file conn - Log to a keep-alive TCP connection smtp - Log via email  Certain configuration is common to all modes of log output:\n LEVEL is the lowest level that this output will log. This value is inherited from [log] and in the case of the non-default loggers from [log.sublogger]. STACKTRACE_LEVEL is the lowest level that this output will print a stacktrace. This value is inherited. MODE is the mode of the log output. It will default to the sublogger name. Thus [log.console.macaron] will default to MODE = console. COLORIZE will default to true for console as described, otherwise it will default to false.  Non-inherited default values There are several values which are not inherited as described above but rather default to those specific to type of logger, these are: EXPRESSION, FLAGS, PREFIX and FILE_NAME.\nEXPRESSION EXPRESSION represents a regular expression that log events must match to be logged by the sublogger. Either the log message, (with colors removed), must match or the longfilename:linenumber:functionname must match. NB: the whole message or string doesn\u0026rsquo;t need to completely match.\nPlease note this expression will be run in the sublogger\u0026rsquo;s goroutine not the logging event subroutine. Therefore it can be complicated.\nFLAGS FLAGS represents the preceding logging context information that is printed before each message. It is a comma-separated string set. The order of values does not matter.\nPossible values are:\n none or , - No flags. date - the date in the local time zone: 2009/01/23. time - the time in the local time zone: 01:23:23. microseconds - microsecond resolution: 01:23:23.123123. Assumes time. longfile - full file name and line number: /a/b/c/d.go:23. shortfile - final file name element and line number: d.go:23. funcname - function name of the caller: runtime.Caller(). shortfuncname - last part of the function name. Overrides funcname. utc - if date or time is set, use UTC rather than the local time zone. levelinitial - Initial character of the provided level in brackets eg. [I] for info. level - Provided level in brackets [INFO] medfile - Last 20 characters of the filename - equivalent to shortfile,longfile. stdflags - Equivalent to date,time,medfile,shortfuncname,levelinitial  Console mode For loggers in console mode, COLORIZE will default to true if not on windows, or the windows terminal can be set into ANSI mode or is a cygwin or Msys pipe.\nIf STDERR is set to true the logger will use os.Stderr instead of os.Stdout.\nFile mode The FILE_NAME defaults as described above. If set it will be relative to the provided ROOT_PATH in the master [log] section.\nOther values:\n LOG_ROTATE: true: Rotate the log files. MAX_SIZE_SHIFT: 28: Maximum size shift of a single file, 28 represents 256Mb. DAILY_ROTATE: true: Rotate logs daily. MAX_DAYS: 7: Delete the log file after n days COMPRESS: true: Compress old log files by default with gzip COMPRESSION_LEVEL: -1: Compression level  Conn mode  RECONNECT_ON_MSG: false: Reconnect host for every single message. RECONNECT: false: Try to reconnect when connection is lost. PROTOCOL: tcp: Set the protocol, either \u0026ldquo;tcp\u0026rdquo;, \u0026ldquo;unix\u0026rdquo; or \u0026ldquo;udp\u0026rdquo;. ADDR: :7020: Sets the address to connect to.  SMTP mode It is not recommended to use this logger to send general logging messages. However, you could perhaps set this logger to work on FATAL.\n USER: User email address to send from. PASSWD: Password for the smtp server. HOST: 127.0.0.1:25: The SMTP host to connect to. RECEIVERS: Email addresses to send to. SUBJECT: Diagnostic message from Gitea  Default Configuration The default empty configuration is equivalent to:\n[log] ROOT_PATH = %(GITEA_WORK_DIR)/log MODE = console LEVEL = Info STACKTRACE_LEVEL = None REDIRECT_MACARON_LOG = false ENABLE_ACCESS_LOG = false ENABLE_XORM_LOG = true XORM = , [log.console] MODE = console LEVEL = %(LEVEL) STACKTRACE_LEVEL = %(STACKTRACE_LEVEL) FLAGS = stdflags PREFIX = COLORIZE = true # Or false if your windows terminal cannot color This is equivalent to sending all logs to the console, with default go log being sent to the console log too.\nLog colorization Logs to the console will be colorized by default when not running on Windows. Terminal sniffing will occur on Windows and if it is determined that we are running on a terminal capable of color we will colorize.\nFurther, on *nix it is becoming common to have file logs that are colored by default. Therefore file logs will be colorised by default when not running on Windows.\nYou can switch on or off colorization by using the COLORIZE value.\nFrom a development point of view. If you write log.Info(\u0026quot;A %s string\u0026quot;, \u0026quot;formatted\u0026quot;) the formatted part of the log message will be Bolded on colorized logs.\nYou can change this by either rendering the formatted string yourself. Or you can wrap the value in a log.ColoredValue struct.\nThe log.ColoredValue struct contains a pointer to value, a pointer to string of bytes which should represent a color and second set of reset bytes. Pointers were chosen to prevent copying of large numbers of values. There are several helper methods:\n log.NewColoredValue takes a value and 0 or more color attributes that represent the color. If 0 are provided it will default to a cached bold. Note, it is recommended that color bytes constructed from attributes should be cached if this is a commonly used log message. log.NewColoredValuePointer takes a pointer to a value, and 0 or more color attributes that represent the color. log.NewColoredValueBytes takes a value and a pointer to an array of bytes representing the color.  These functions will not double wrap a log.ColoredValue. They will also set the resetBytes to the cached resetBytes.\nThe colorBytes and resetBytes are not exported to prevent accidental overwriting of internal values.\nColorFormat \u0026amp; ColorFormatted Structs may implement the log.ColorFormatted interface by implementing the ColorFormat(fmt.State) function.\nIf a log.ColorFormatted struct is logged with %-v format, its ColorFormat will be used instead of the usual %v. The full fmt.State will be passed to allow implementers to look at additional flags.\nIn order to help implementers provide ColorFormat methods. There is a log.ColorFprintf(...) function in the log module that will wrap values in log.ColoredValue and recognise %-v.\nIn general it is recommended not to make the results of this function too verbose to help increase its versatility. Usually this should simply be an ID:Name. If you wish to make a more verbose result, it is recommended to use %-+v as your marker.\nLog Spoofing protection In order to protect the logs from being spoofed with cleverly constructed messages. Newlines are now prefixed with a tab and control characters except those used in an ANSI CSI are escaped with a preceding \\ and their octal value.\nCreating a new named logger group Should a developer wish to create a new named logger, NEWONE. It is recommended to add an ENABLE_NEWONE_LOG value to the [log] section, and to add a new NEWONE value for the modes.\nA function like func newNewOneLogService() is recommended to manage construction of the named logger. e.g.\nfunc newNewoneLogService() { EnableNewoneLog = Cfg.Section(\u0026#34;log\u0026#34;).Key(\u0026#34;ENABLE_NEWONE_LOG\u0026#34;).MustBool(false) Cfg.Section(\u0026#34;log\u0026#34;).Key(\u0026#34;NEWONE\u0026#34;).MustString(\u0026#34;file\u0026#34;) // or console? or \u0026#34;,\u0026#34; if you want to send this to default logger by default \tif EnableNewoneLog { options := newDefaultLogOptions() options.filename = filepath.Join(LogRootPath, \u0026#34;newone.log\u0026#34;) options.flags = \u0026#34;stdflags\u0026#34; options.bufferLength = Cfg.Section(\u0026#34;log\u0026#34;).Key(\u0026#34;BUFFER_LEN\u0026#34;).MustInt64(10000) generateNamedLogger(\u0026#34;newone\u0026#34;, options) } } You should then add newOneLogService to NewServices() in modules/setting/setting.go\n","permalink":"https://ertlans.github.io/en-us/logging-configuration/","tags":null,"title":"Advanced: Logging Configuration"}]